(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    179614,       3658]
NotebookOptionsPosition[    171879,       3544]
NotebookOutlinePosition[    172355,       3562]
CellTagsIndexPosition[    172312,       3559]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"162df380-9bd7-404a-a2c3-ff1eff33472d"],

Cell["\<\
Make sure the sweepsInTime_S1.nb and sit.likelihood_inference_code.nb are \
initialised.

Now set variables for the specific run\
\>", "Text",
 CellChangeTimes->{{3.8846895362105513`*^9, 3.884689551848053*^9}, {
  3.8846896015281477`*^9, 3.884689637055846*^9}, {3.8847676265078583`*^9, 
  3.884767651213468*^9}, {3.8855321098938727`*^9, 3.8855321562825627`*^9}, {
  3.8855364803683195`*^9, 
  3.8855364913972254`*^9}},ExpressionUUID->"e2317538-b456-496d-8cf8-\
c99fcd226f37"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "filePath", " ", "=", " ", 
   "\"\<brenthis_daphne_28022023.vs.brenthis_daphne.ES_BD_1141.v2_0.\
chromosome_2.slexonless.fusion_1.Mb.kmax_2.formatted_blocks.tsv\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"kmax", " ", "=", " ", "2"}], ";"}]}], "Input",
 CellChangeTimes->{{3.885536498359898*^9, 3.88553653563721*^9}, {
   3.885536614039048*^9, 3.885536702025876*^9}, {3.885536852380468*^9, 
   3.885536858910793*^9}, {3.8855368894971*^9, 3.8855369291812468`*^9}, {
   3.885537442038272*^9, 3.885537465746043*^9}, {3.8855479503549366`*^9, 
   3.8855479865675344`*^9}, {3.8855499402820463`*^9, 
   3.8855500226501303`*^9}, {3.8855507444355183`*^9, 3.885550750288042*^9}, {
   3.885551451278498*^9, 3.885551469683442*^9}, {3.8855519795457907`*^9, 
   3.8855520670895176`*^9}, {3.88555245183395*^9, 3.8855525025106335`*^9}, {
   3.885553428641666*^9, 3.8855534880103164`*^9}, {3.88555445309427*^9, 
   3.885554533683335*^9}, {3.8855570082259564`*^9, 3.8855570356727676`*^9}, {
   3.885619614553011*^9, 3.885619634084403*^9}, {3.8856196951352606`*^9, 
   3.885619696069662*^9}, {3.8856274988622723`*^9, 3.8856274989247456`*^9}, {
   3.885627539996107*^9, 3.8856275846993995`*^9}, {3.885627913163026*^9, 
   3.8856279792900925`*^9}, {3.8859648286986685`*^9, 3.885964828745579*^9}, {
   3.885964879721946*^9, 3.885964880325821*^9}, {3.8859649111789804`*^9, 
   3.885964940301588*^9}, {3.885984959403469*^9, 3.8859849739054976`*^9}, {
   3.887096680523697*^9, 3.887096703662959*^9}, {3.8870994413693733`*^9, 
   3.8870994796887007`*^9}, {3.8875330434346046`*^9, 3.887533097828966*^9}, {
   3.8875355584327354`*^9, 3.8875355584952364`*^9}, {3.887535621680373*^9, 
   3.8875356742636595`*^9}, {3.8875361273550777`*^9, 3.887536148699586*^9}, {
   3.8875362485289383`*^9, 3.8875362778279037`*^9}, {3.8876924870945725`*^9, 
   3.8876924871438284`*^9}, {3.8876925853816175`*^9, 3.887692588918223*^9}, {
   3.887695487446168*^9, 3.887695501876384*^9}, {3.887696181455345*^9, 
   3.8876961823742685`*^9}, {3.8876997537014637`*^9, 
   3.8876997550488467`*^9}, {3.887798783509057*^9, 3.8877988464703655`*^9}, {
   3.8877996520385847`*^9, 3.8877997189296227`*^9}, {3.8878648726341515`*^9, 
   3.8878649370929995`*^9}, {3.887880398537436*^9, 3.8878804393909464`*^9}, 
   3.8878804795137653`*^9, {3.887881061527214*^9, 3.887881062453203*^9}, {
   3.8878859490138226`*^9, 3.8878859857284575`*^9}, {3.8879535560516105`*^9, 
   3.887953556304987*^9}, {3.887953958365106*^9, 3.8879539777130446`*^9}, {
   3.887954747295096*^9, 3.8879547953077397`*^9}, {3.887960515345539*^9, 
   3.8879605210714397`*^9}, {3.8879605516900806`*^9, 
   3.8879605537428417`*^9}, {3.887960617673235*^9, 3.8879606177559514`*^9}, {
   3.8879607650597067`*^9, 3.8879607653664026`*^9}, {3.8879790701719027`*^9, 
   3.887979085255313*^9}, {3.887980030732132*^9, 3.887980077459628*^9}, {
   3.8881431407370214`*^9, 3.8881431500437727`*^9}, {3.888143355086223*^9, 
   3.8881433551732674`*^9}, {3.8881434053342996`*^9, 
   3.8881434077184944`*^9}, {3.8881451273473773`*^9, 3.888145127720463*^9}, {
   3.888145163728896*^9, 3.8881451638064017`*^9}, {3.8881452012494183`*^9, 
   3.888145203286627*^9}, {3.8881452363465805`*^9, 3.8881452364270086`*^9}, {
   3.8881452748242044`*^9, 3.8881452752383575`*^9}, {3.888157545603902*^9, 
   3.888157545904106*^9}, {3.888157643929122*^9, 3.8881576441801653`*^9}, {
   3.8883936162782135`*^9, 3.8883936165585318`*^9}, {3.8887368598129587`*^9, 
   3.8887368602215223`*^9}, {3.8887485338687887`*^9, 
   3.8887485339342475`*^9}, {3.888749280555372*^9, 3.8887492808833933`*^9}, {
   3.888749413739732*^9, 3.8887494156166153`*^9}, {3.888753516311062*^9, 
   3.8887535183935785`*^9}, {3.888769641215223*^9, 3.888769641630021*^9}, {
   3.8888132407647104`*^9, 3.88881324109276*^9}, {3.888824882886459*^9, 
   3.8888248829518733`*^9}, {3.888830936308442*^9, 3.888830938857932*^9}, {
   3.8888341537448397`*^9, 3.888834154113144*^9}, {3.8889040602152286`*^9, 
   3.888904060281753*^9}, {3.888909239042938*^9, 3.8889092393130293`*^9}, {
   3.888923632601321*^9, 3.888923633026289*^9}, {3.888923919588952*^9, 
   3.8889239196604958`*^9}, {3.8889246107212524`*^9, 
   3.8889246109816985`*^9}, {3.888925693658886*^9, 3.8889256937294617`*^9}, {
   3.8889266520173364`*^9, 3.8889266523480034`*^9}, {3.8889835464244785`*^9, 
   3.888983547177502*^9}, {3.8889864820540943`*^9, 3.8889864821149178`*^9}, {
   3.888989336856326*^9, 3.8889893387560596`*^9}, {3.889000044383094*^9, 
   3.889000044864983*^9}, {3.889022246020382*^9, 3.8890222482136765`*^9}, {
   3.8890726817900205`*^9, 3.8890726818694334`*^9}, {3.889075407525079*^9, 
   3.8890754075880585`*^9}, {3.889080980000643*^9, 3.8890809802881613`*^9}, {
   3.889083709084447*^9, 3.88908370962547*^9}, {3.8891603187042828`*^9, 
   3.889160318774114*^9}, {3.889252316983747*^9, 3.8892523171894336`*^9}, {
   3.8892794463720217`*^9, 3.8892794466868773`*^9}, {3.8892933571313124`*^9, 
   3.8892933575259314`*^9}, {3.88934908819048*^9, 3.8893490882722387`*^9}, {
   3.889354846551608*^9, 3.889354850531459*^9}, {3.889436881710209*^9, 
   3.8894368819840508`*^9}, {3.889438647900202*^9, 3.889438690890787*^9}, {
   3.889438778091104*^9, 3.8894387916159735`*^9}, {3.889439035755739*^9, 
   3.8894390414595604`*^9}, {3.8894414215433793`*^9, 
   3.8894414220319147`*^9}, {3.889501049199405*^9, 3.889501058645337*^9}, 
   3.8895010947526326`*^9, {3.8896097723381567`*^9, 3.889609800574879*^9}, {
   3.889635581863611*^9, 3.889635603157246*^9}, {3.8896793879838142`*^9, 
   3.8896794027555695`*^9}, {3.8896971319727297`*^9, 3.88969714466632*^9}, {
   3.889716649192007*^9, 3.8897166553421125`*^9}, {3.889718104214239*^9, 
   3.889718104608368*^9}, {3.889718449132347*^9, 3.889718449652875*^9}, {
   3.8897957050800285`*^9, 3.8897957060699987`*^9}, {3.889795855070487*^9, 
   3.889795855941447*^9}, {3.8899292939132524`*^9, 3.889929323465307*^9}, {
   3.8900416011408696`*^9, 3.8900416015861444`*^9}, {3.8900598654929385`*^9, 
   3.8900598657602644`*^9}, {3.8901315747475767`*^9, 3.890131575085718*^9}, {
   3.890144194705592*^9, 3.8901441991169786`*^9}, {3.8901506755653377`*^9, 
   3.8901506758755445`*^9}, {3.890196855755869*^9, 3.8901968561659718`*^9}, {
   3.8902011105777664`*^9, 3.8902011106287737`*^9}, {3.890203370159375*^9, 
   3.890203370583494*^9}, {3.8902045347814417`*^9, 3.890204535064689*^9}, {
   3.8902046104039316`*^9, 3.8902046119575796`*^9}, {3.890206645218745*^9, 
   3.8902066464511957`*^9}, {3.8902137916443005`*^9, 3.890213795331439*^9}, {
   3.890218676599313*^9, 3.890218676881346*^9}, {3.890225424215602*^9, 
   3.8902254261282187`*^9}, {3.890228855326191*^9, 3.890228856312806*^9}, {
   3.89022981521247*^9, 3.8902298152882123`*^9}, {3.890231068517971*^9, 
   3.8902310705710955`*^9}, {3.890234294843193*^9, 3.890234294917922*^9}, {
   3.890235861243828*^9, 3.890235861517787*^9}, {3.8902382532191076`*^9, 
   3.8902382532691393`*^9}, {3.8902415553303175`*^9, 
   3.8902415556793056`*^9}, {3.8902871716333585`*^9, 3.890287172029478*^9}, {
   3.890289283676781*^9, 3.8902892840303564`*^9}, {3.890289599677163*^9, 
   3.890289600029174*^9}, {3.8903843740045085`*^9, 3.8903843743206367`*^9}, {
   3.890403361702015*^9, 3.8904033619144783`*^9}, {3.890453182251274*^9, 
   3.890453182543027*^9}, {3.8907171313082137`*^9, 3.8907171315929737`*^9}, {
   3.8907977047860985`*^9, 3.8907977050867057`*^9}, {3.8909081299565105`*^9, 
   3.8909081302973003`*^9}, {3.8913995153997936`*^9, 3.891399515856038*^9}, {
   3.891568507370463*^9, 3.8915685092751865`*^9}, {3.8916640064395657`*^9, 
   3.891664006921614*^9}, {3.8946904007010565`*^9, 3.8946904012705975`*^9}, {
   3.894690834283679*^9, 3.8946908369798017`*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"b9c8d29b-91c2-4a96-881d-7fc97feb86a1"],

Cell["\<\
These are two functions that will be helpful for working with the GF and \
SparseArrays.\
\>", "Text",
 CellChangeTimes->{{3.8871095488693113`*^9, 
  3.887109564378745*^9}},ExpressionUUID->"52ff7ead-9efc-4358-b16d-\
2ea3b1613814"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FoldSFS", "[", 
     RowBox[{"exp_", ",", "\[Omega]_", ",", "sampleSize_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "sample", " ", "size", " ", "is", " ", "haploid", " ", "number", " ", 
       "of", " ", "chromosomes"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"itons", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{"i", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"sampleSize", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
        "reverse", ",", "paired", ",", "subrls"}], "\[IndentingNewLine]", 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "itons", "]"}], "\[LessEqual]", "2"}], ",", 
         RowBox[{"Return", "[", "exp", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"reverse", " ", "=", " ", 
        RowBox[{"Reverse", "[", "itons", "]"}]}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"paired", " ", "=", " ", 
        RowBox[{"MapThread", "[", 
         RowBox[{"List", ",", 
          RowBox[{"{", 
           RowBox[{"itons", ",", "reverse"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"paired", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"paired", ",", 
          RowBox[{"x_", "/;", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ">", 
            RowBox[{"x", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"subrls", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"\[Omega]", "[", 
             RowBox[{"{", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "}"}], "]"}], "->", " ", 
            RowBox[{"\[Omega]", "[", 
             RowBox[{"{", 
              RowBox[{
              "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "}"}], "]"}]}], ")"}], " ", "&"}], "/@", "paired"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"exp", "/.", "subrls"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8846029021685057`*^9, 3.884603049801085*^9}, {
   3.8846031891096773`*^9, 3.884603292740625*^9}, {3.884603362626472*^9, 
   3.884603407789896*^9}, {3.884603438094235*^9, 3.8846035372023163`*^9}, {
   3.884603618716305*^9, 3.884603655592557*^9}, {3.88460371664496*^9, 
   3.884604066229925*^9}, {3.884604148992104*^9, 3.884604149226985*^9}, {
   3.884604242760558*^9, 3.884604243996953*^9}, {3.884680895026978*^9, 
   3.8846808956348877`*^9}, {3.884680993867249*^9, 3.8846809975469427`*^9}, 
   3.8846896443908033`*^9, {3.884944434723575*^9, 3.884944457340378*^9}, {
   3.884944516654097*^9, 3.884944518337821*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"33eecb9b-661f-4b22-ae92-b44dac2f953d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SubstituteSparseArray", "[", 
    RowBox[{"sparr_", ",", "rules_"}], "]"}], ":=", 
   RowBox[{"SparseArray", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ArrayRules", "[", "sparr", "]"}], "/.", "rules"}], ",", 
     RowBox[{"Dimensions", "[", "sparr", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.884771879236108*^9, 3.884771948264461*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"085df4ae-3e9e-4c21-a22c-6e782b864930"],

Cell[CellGroupData[{

Cell["Neutral Model ", "Section",
 CellChangeTimes->{{3.884767964144246*^9, 3.884767966641179*^9}, {
  3.884943034327983*^9, 3.884943037070518*^9}, {3.8870902957812862`*^9, 
  3.8870902979053183`*^9}},ExpressionUUID->"e53c2e25-59b3-4f2d-bc27-\
38723ea4ae4e"],

Cell["\<\
Here is the generating function for six (unlabelled) lineages. We will use \
this to fit neutral models (i.e. no selection) to mutation configurations in \
short sequence blocks (the bSFS).\
\>", "Text",
 CellChangeTimes->{{3.8847679859460373`*^9, 3.884768056258974*^9}, {
  3.885532323459146*^9, 3.8855323397341223`*^9}, {3.8862265690056095`*^9, 
  3.886226570515195*^9}, {3.887087805899899*^9, 3.8870878079551125`*^9}, {
  3.894691278177905*^9, 3.894691291203932*^9}, {3.894691379313153*^9, 
  3.894691409137086*^9}},ExpressionUUID->"a6c8d656-da11-4645-a8f2-\
10b6f166f253"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"samples", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "6"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gfn", " ", "=", " ", 
   RowBox[{"GFn", "[", 
    RowBox[{"\[Omega]", ",", "samples"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gfnFolded", " ", "=", " ", 
   RowBox[{"FoldSFS", "[", 
    RowBox[{"gfn", ",", "\[Omega]", ",", "6"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8846812478781033`*^9, 3.884681257663711*^9}, {
   3.884681348001758*^9, 3.884681352215822*^9}, {3.884681441322432*^9, 
   3.8846814428444366`*^9}, {3.884681510032939*^9, 3.8846815373483143`*^9}, 
   3.884689709641224*^9, {3.8848372384158297`*^9, 3.8848372625945253`*^9}, {
   3.8862265813242445`*^9, 3.8862265959568186`*^9}, {3.8862313181176677`*^9, 
   3.8862313195816703`*^9}, {3.8870878117799225`*^9, 3.887087812992586*^9}, {
   3.8870878599663353`*^9, 3.8870878666507263`*^9}, {3.8870880771771097`*^9, 
   3.887088077745915*^9}, 3.8879737978972015`*^9},
 CellLabel->
  "In[155]:=",ExpressionUUID->"f2139d38-0349-4ec1-b344-2c926af4ec9b"],

Cell["Here are the resulting branch types", "Text",
 CellChangeTimes->{{3.887087905628111*^9, 
  3.8870879210036416`*^9}},ExpressionUUID->"15c2e0a4-36b8-45fd-af5e-\
27573aa90cc7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"branchTypesFolded", " ", "=", " ", 
  RowBox[{
   RowBox[{"GetVars", "[", 
    RowBox[{"\[Omega]", ",", "gfnFolded"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Omega]", "[", "x_", "]"}], "\[RuleDelayed]", " ", "x"}], 
    "}"}]}]}]], "Input",
 CellChangeTimes->{{3.884681638220277*^9, 3.884681638530487*^9}, {
  3.884682398587493*^9, 3.884682402979274*^9}, {3.884682486105371*^9, 
  3.884682516611064*^9}, {3.88468373723216*^9, 3.884683744399069*^9}, {
  3.8847681518853693`*^9, 3.88476815856707*^9}, {3.8870879367612286`*^9, 
  3.887087937080989*^9}, {3.8870880834795036`*^9, 3.8870880852680864`*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"987ad324-5ed7-4a5a-889a-75d9132e2524"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8846825117623367`*^9, 3.8846825186660433`*^9}, 
   3.884683744648881*^9, 3.884768162340678*^9, 3.884929212096607*^9, 
   3.885354465569167*^9, 3.8855323800973845`*^9, 3.88553638752628*^9, 
   3.88553659002122*^9, 3.8855367856429434`*^9, 3.885536947204049*^9, 
   3.8855374715702267`*^9, 3.8855480336999655`*^9, 3.8855483933933034`*^9, 
   3.885550044422*^9, 3.8855507591704865`*^9, 3.8855514789120674`*^9, 
   3.8855520723468456`*^9, 3.8855525219240274`*^9, 3.885553504691842*^9, 
   3.885554552303133*^9, 3.8855570458347163`*^9, 3.8856152140878534`*^9, 
   3.885619927556771*^9, 3.885619981028922*^9, 3.885620037691208*^9, 
   3.8856275973605843`*^9, 3.88562802431915*^9, 3.8856280861854286`*^9, 
   3.8859649673563447`*^9, 3.8859850216548977`*^9, 3.886226625456167*^9, {
   3.8862313268481846`*^9, 3.886231342807165*^9}, 3.887087938436162*^9, 
   3.887088085630509*^9, 3.887097026533246*^9, 3.8870994854796467`*^9, 
   3.8871094188713765`*^9, 3.88753062040793*^9, 3.887533114118968*^9, 
   3.887535684773345*^9, 3.8875361538586435`*^9, 3.8876927345206857`*^9, 
   3.8876930944290547`*^9, 3.8876931305482845`*^9, 3.8876931664909706`*^9, 
   3.887693288097608*^9, 3.8876961991221333`*^9, 3.8876997600615854`*^9, 
   3.8877988953460007`*^9, 3.88779973797456*^9, 3.887864978300233*^9, 
   3.8878804876556287`*^9, 3.8878810657513494`*^9, 3.8878860333299665`*^9, 
   3.887953644268415*^9, 3.887954831458392*^9, 3.887960558348246*^9, 
   3.887960621216545*^9, 3.887960773190505*^9, 3.8879711279014044`*^9, 
   3.887972685242671*^9, 3.8879738075408535`*^9, 3.8879742948564816`*^9, 
   3.887978035150136*^9, 3.8879800830631547`*^9, 3.88813518367819*^9, 
   3.8881432058279686`*^9, 3.888143358784475*^9, 3.888143411595538*^9, 
   3.8881451348708706`*^9, 3.888145167977789*^9, 3.888145206574765*^9, 
   3.8881452400155845`*^9, 3.888145279391873*^9, 3.8881575529401727`*^9, 
   3.8881576475696993`*^9, 3.888393670380559*^9, 3.8884703644796047`*^9, 
   3.8884951635278683`*^9, 3.888736889485162*^9, 3.8887408304291115`*^9, 
   3.8887485996561003`*^9, 3.888749224370043*^9, 3.8887492870943565`*^9, 
   3.888749421596155*^9, 3.8887535226067944`*^9, 3.888769733653678*^9, 
   3.8888133194143896`*^9, 3.8888211482209682`*^9, 3.888824941595354*^9, 
   3.888830962333187*^9, 3.8888342054894443`*^9, 3.888897852814913*^9, 
   3.888904065431738*^9, 3.8889092436205673`*^9, 3.888918046043166*^9, 
   3.8889236971536036`*^9, 3.88892392392675*^9, 3.8889246160449038`*^9, 
   3.888925699517361*^9, 3.888926708387504*^9, 3.8889836255848866`*^9, 
   3.8889864864718575`*^9, 3.8889893423823304`*^9, 3.8890000491945133`*^9, 
   3.889018960448492*^9, 3.8890190110062437`*^9, 3.889023978953724*^9, 
   3.889069525917989*^9, 3.889072750543827*^9, 3.889075411234296*^9, 
   3.889080983801447*^9, 3.8890843654686346`*^9, 3.889112481636721*^9, 
   3.889160429664036*^9, 3.8891710120912113`*^9, 3.889246310365468*^9, 
   3.889252328441579*^9, 3.8892742164585657`*^9, 3.8892794503387785`*^9, 
   3.8892933613350315`*^9, 3.889335750114015*^9, 3.8893490924515886`*^9, 
   3.8893548544314785`*^9, 3.8894386968482046`*^9, 3.8894387982471924`*^9, 
   3.8894390496372128`*^9, 3.8894391967399006`*^9, 3.889441425549249*^9, 
   3.8895011342765007`*^9, 3.8895929702537994`*^9, 3.889609821082868*^9, 
   3.889626191248411*^9, 3.8896280335546703`*^9, 3.8896290510834055`*^9, 
   3.889632945534083*^9, 3.8896344613985853`*^9, 3.8896349844470725`*^9, 
   3.88963563905486*^9, 3.8896713527187223`*^9, 3.889679406537059*^9, 
   3.889697150321858*^9, 3.8897138341939917`*^9, 3.889716687925223*^9, 
   3.889718174246713*^9, 3.8897184530557203`*^9, 3.889767583084025*^9, 
   3.889767737651473*^9, 3.889773660280632*^9, 3.8897957619876842`*^9, 
   3.8897959199901676`*^9, 3.8897960045642304`*^9, 3.8898000870432625`*^9, 
   3.889806523249901*^9, 3.889819558085416*^9, 3.889819683302844*^9, 
   3.8898435780684085`*^9, 3.8898527028755784`*^9, 3.8898528370737915`*^9, 
   3.889861441029705*^9, 3.8898672501595683`*^9, 3.889891078932537*^9, 
   3.889929356500842*^9, 3.88992942369326*^9, 3.889935773899838*^9, 
   3.889941673678485*^9, 3.889955796985549*^9, 3.8900186078805137`*^9, 
   3.890018722701993*^9, 3.890029055227841*^9, 3.8900392841147404`*^9, 
   3.8900393591809244`*^9, 3.8900416889781504`*^9, 3.890042696124203*^9, 
   3.8900455802794647`*^9, 3.8900482707819786`*^9, 3.8900600207493877`*^9, 
   3.890060133763228*^9, 3.8900615702904606`*^9, {3.890061654190087*^9, 
   3.890061707071413*^9}, 3.8901041739204855`*^9, 3.8901042426313787`*^9, 
   3.8901086900486374`*^9, 3.890121832462946*^9, 3.8901278625274096`*^9, 
   3.890132102085393*^9, 3.8901442576101427`*^9, 3.890144394151555*^9, 
   3.8901507934468694`*^9, 3.8901508283244925`*^9, 3.8901939235349665`*^9, 
   3.890194029663043*^9, 3.8901969228183093`*^9, 3.890201114028155*^9, 
   3.8902033753179827`*^9, 3.8902045886073737`*^9, 3.890204634976514*^9, 
   3.890206649588566*^9, 3.8902138592917023`*^9, 3.8902139848495564`*^9, 
   3.8902187298791957`*^9, 3.8902206065509243`*^9, 3.890220800463908*^9, 
   3.8902209763620777`*^9, 3.8902210320442753`*^9, 3.8902254931343904`*^9, 
   3.8902289091775455`*^9, 3.8902298775779743`*^9, 3.8902311452570724`*^9, 
   3.890234298014705*^9, 3.890235865133787*^9, 3.890238259705079*^9, 
   3.890241635725353*^9, 3.890241681618306*^9, {3.8902417188065653`*^9, 
   3.890241756757963*^9}, 3.890277432684081*^9, 3.8902780124988766`*^9, 
   3.8902780972547054`*^9, 3.890279983176244*^9, 3.8902800611686993`*^9, 
   3.8902872194016933`*^9, 3.8902892893313346`*^9, 3.890289603432787*^9, 
   3.890384476746623*^9, 3.8903845192479677`*^9, 3.89040347355474*^9, 
   3.890403640850458*^9, 3.8904075160675497`*^9, 3.8904532732455807`*^9, 
   3.890453331025134*^9, 3.8904534182900147`*^9, 3.890453489110262*^9, 
   3.890717192630538*^9, 3.890717558577144*^9, 3.890717931674258*^9, 
   3.890725362658967*^9, 3.8907335101676044`*^9, 3.890733721804279*^9, 
   3.8907977902048397`*^9, 3.8907978233811846`*^9, {3.890797876241394*^9, 
   3.8907979052526608`*^9}, 3.8908198390706887`*^9, 3.8908835123626328`*^9, 
   3.890883615503583*^9, 3.8909082784335027`*^9, 3.890963257371601*^9, {
   3.890969097296137*^9, 3.890969125285342*^9}, 3.89139962399806*^9, 
   3.891399668628458*^9, 3.8914003369322624`*^9, 3.8914033379342556`*^9, 
   3.891427906451806*^9, 3.8914369018872643`*^9, 3.891481961030389*^9, 
   3.891482006081493*^9, 3.8914821317540693`*^9, 3.891484778093516*^9, 
   3.8915685859012814`*^9, 3.8915687009360094`*^9, 3.8915767908335047`*^9, 
   3.891582466237091*^9, 3.89158973033998*^9, 3.891653119619548*^9, 
   3.891653550600626*^9, 3.8916563489024696`*^9, 3.891664062545506*^9, 
   3.894690872596052*^9},
 CellLabel->
  "Out[158]=",ExpressionUUID->"757a6cc1-e806-49f5-bd92-511fb49fe966"]
}, Open  ]],

Cell["\<\
MakeProbTable is a function that returns a symbolic sparse array. In other \
words, it contains a matrix where each entry has an expression that can be \
used to calculate the probability of a particular bSFS entry given a neutral \
model with one parameter (theta). 
To see the matrix itself, we just apply Normal[ ] to the output of \
MakeProbTable[ ... ].  
probTableFoldedNeutral will be a function of \[Theta] (no more \[Omega]\
\[CloseCurlyQuote]s) and we can substitute real values in for \[Theta] = 4N\
\[Mu] .\
\>", "Text",
 CellChangeTimes->{{3.884768357508357*^9, 3.884768474264265*^9}, {
  3.884768505517354*^9, 3.884768696947363*^9}, {3.884768904037072*^9, 
  3.8847690014841623`*^9}, {3.884772060561417*^9, 3.884772063216003*^9}, {
  3.8855324006253366`*^9, 3.8855324107419662`*^9}, {3.8855324445638857`*^9, 
  3.8855324625178156`*^9}, {3.8870903184486256`*^9, 3.8870903204920597`*^9}, {
  3.8870903771631813`*^9, 3.8870903772311926`*^9}, {3.8871095989858255`*^9, 
  3.8871096003003597`*^9}, {3.8946912995713344`*^9, 3.894691375973136*^9}, {
  3.8946914182549915`*^9, 
  3.8946914427299623`*^9}},ExpressionUUID->"52a27369-cb6a-41d3-9407-\
86b0605005ea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"probTableFoldedNeutral", " ", "=", " ", 
   RowBox[{"MakeProbTable", "[", 
    RowBox[{
    "gfnFolded", ",", "\[Omega]", ",", "\[Theta]", ",", "branchTypesFolded", 
     ",", "kmax"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "@", 
    RowBox[{"Normal", "[", "probTableFoldedNeutral", "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", "1.0"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.884682665848312*^9, 3.884682668416491*^9}, {
   3.884682724281416*^9, 3.8846827245634212`*^9}, {3.884682980979253*^9, 
   3.88468298185262*^9}, {3.884683027437072*^9, 3.884683032977375*^9}, {
   3.884683107919573*^9, 3.884683108074308*^9}, {3.884768282497615*^9, 
   3.8847683874591208`*^9}, {3.8847687361659107`*^9, 
   3.8847687838648987`*^9}, {3.884768897670185*^9, 3.884768898907529*^9}, {
   3.8847715468226967`*^9, 3.884771555979105*^9}, 3.8847717858381147`*^9, {
   3.884772021680482*^9, 3.884772043551188*^9}, {3.8848378042876463`*^9, 
   3.884837831467699*^9}, {3.884837864873826*^9, 3.884837927926878*^9}, {
   3.8855356686092386`*^9, 3.885535676686846*^9}, {3.887087980413147*^9, 
   3.887087986439022*^9}, {3.887088088929376*^9, 3.8870881080029325`*^9}, {
   3.88708816724916*^9, 3.8870881867740564`*^9}, {3.8870882366564355`*^9, 
   3.887088238133933*^9}, {3.887090399414796*^9, 3.8870904007222805`*^9}, 
   3.887973817034737*^9, 
   3.89469144588754*^9},ExpressionUUID->"4ce3f564-ceb3-4281-8522-\
de6608b1b0c1"],

Cell["\<\
If we want to substitute theta into the sparse array directly, we can use \
this function defined at the top of this notebook.\
\>", "Text",
 CellChangeTimes->{{3.8847720777515593`*^9, 
  3.884772120928254*^9}},ExpressionUUID->"c41a2832-abdb-4f42-b519-\
846aacd09aa6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"MatrixForm", "@", 
    RowBox[{"SubstituteSparseArray", "[", 
     RowBox[{"probTableFoldedNeutral", ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", "\[Rule]", "1.0"}], "}"}]}], "]"}]}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.88477196095539*^9, 3.884771987639901*^9}, {
   3.884772125497113*^9, 3.884772126757942*^9}, {3.885354496515136*^9, 
   3.885354507865485*^9}, {3.885532520523367*^9, 3.8855325219758587`*^9}, {
   3.8855356848904023`*^9, 3.88553568582621*^9}, 3.8879738205269136`*^9, {
   3.888736907655772*^9, 3.8887369108663845`*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"0403394d-1257-4a9e-afd9-d360e431a099"],

Cell["\<\
Here we make a numeric probtable for theta = 0.75 and save it for later. This \
means that we have evaluated the expressions after substituting in theta, \
i.e. the array now contains probabilities.\
\>", "Text",
 CellChangeTimes->{{3.8855348956076536`*^9, 3.885534925133387*^9}, {
  3.887088291906212*^9, 3.887088304592352*^9}, {3.887088624763101*^9, 
  3.887088627473776*^9}, {3.887109704428151*^9, 3.8871097260009375`*^9}, {
  3.894691454092929*^9, 
  3.894691487515147*^9}},ExpressionUUID->"7bbd770f-ce91-4c33-93a7-\
31784d3c9020"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numProbTableFoldedNeutral", "=", " ", 
   RowBox[{"SubstituteSparseArray", "[", 
    RowBox[{"probTableFoldedNeutral", ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", "\[Rule]", "0.75"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "@", "numProbTableFoldedNeutral"}]}], "Input",
 CellChangeTimes->{{3.8855349294627886`*^9, 3.88553500099012*^9}, {
   3.8855351654680147`*^9, 3.885535175886387*^9}, {3.8855356916792793`*^9, 
   3.8855356938092613`*^9}, {3.8855357639849577`*^9, 3.885535764290718*^9}, {
   3.8855483371874447`*^9, 3.8855483380709352`*^9}, {3.8862268940721855`*^9, 
   3.8862268978550897`*^9}, 3.8862269717990975`*^9, {3.8862270877944345`*^9, 
   3.8862270895272284`*^9}, 3.887973826219925*^9, {3.8946914924255085`*^9, 
   3.894691513862696*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"e227f690-7fb8-4930-9d07-04f1596955bd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.243454486017415`"},
          {"0.0390159526942195`"},
          {"0.012860055156233464`"},
          {"0.008987613653900828`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.09058903150933725`"},
          {"0.010855289554750538`"},
          {"0.003029296522422058`"},
          {"0.001935795321101913`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.036073581082465236`"},
          {"0.0030455656006674182`"},
          {"0.0006361129755119333`"},
          {"0.0003293669597354207`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.027398429341093017`"},
          {"0.0017312895745874336`"},
          {"0.0002451993230086153`"},
          {"0.00007260510355594496`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.16001534283082527`"},
          {"0.0233777594603668`"},
          {"0.006836134902950266`"},
          {"0.0045231371868696135`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.05402989696878584`"},
          {"0.007303288201214502`"},
          {"0.001961658051016245`"},
          {"0.0011889725690355235`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.019346886154538334`"},
          {"0.0021259777965141995`"},
          {"0.00047502374612854587`"},
          {"0.00024035765818021873`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.013676531376457635`"},
          {"0.001172061624350785`"},
          {"0.00019426744074529587`"},
          {"0.00006226125156802431`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.076460647266116`"},
          {"0.009773855113926576`"},
          {"0.0024130413470178553`"},
          {"0.0014504689668092818`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.023250003515453994`"},
          {"0.0031926846257012468`"},
          {"0.0007983608624255226`"},
          {"0.00044655271608899996`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.007279130201249979`"},
          {"0.0009305606872478507`"},
          {"0.00021442454224241685`"},
          {"0.00010411637829761417`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.004601264084154427`"},
          {"0.00048769712421683434`"},
          {"0.0000911766809862252`"},
          {"0.000030924233329537865`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.05869188532869968`"},
          {"0.006242251655513134`"},
          {"0.0011223313771522303`"},
          {"0.000511981935555933`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.01571183463744691`"},
          {"0.0019661826247931447`"},
          {"0.0004116946971320021`"},
          {"0.000185747797212088`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.003942856088288361`"},
          {"0.0005313747327075598`"},
          {"0.00011854529697906695`"},
          {"0.00005055283414116471`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0.0018927594240035206`"},
          {"0.00023862601108789322`"},
          {"0.00004983791300402704`"},
          {"0.00001740169146646764`"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {4, 4, 4}, 0, {
     1, {{0, 16, 32, 48, 64}, {{1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 
       2}, {2, 3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4,
        3}, {4, 4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {
       2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 
       4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3,
        1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {1, 1}, {
       1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3, 1}, {3, 
       2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}}}, CompressedData["
1:eJwBDQLy/SFib1JlAQAAAEAAAABPMME/hCnPP/sasCHm+aM/h/SQYl9Wij/g
YLMVGWiCP5Z7tb/XMLc/rpYCTUw7hj9xTcwv5dBoP4DwImZQt18/umH/hTx4
oj9f1OKUA/NoP6TIkzYa2EQ/gMkIUtyVNT/YUu13VQ6cP5CZkwaOXVw/kFHF
EsMRMD8A8GEucggTPxeHKPxhe8Q/QRhY4Vbwlz9DbW39NAB8P6DTr2TahnI/
RnD5gM6pqz/5wKN/Dep9PzACmiXlEWA/gLgwk+l6Uz+QsUCNq8+TP5gmdaN/
amE/gIpWdJMhPz+AAv2PEIEvP8B34PdwAow/0GUclvszUz+A1/6biHYpPwBY
PChIUhA/r19wy+ySsz95ro+gUASEP202a7WDxGM/AAuvMbXDVz9VTOxS2c6X
P0v3uIGLJ2o/LPay5SIpSj9AO8FP6UM9P7vqhaK40H0/bXj92xt+Tj81wfPK
5BosP0ATUsIhSxs/IO8vbMbYcj+QyegyM/Y/P1CctHPD5hc/ANABkZQ2AD94
AA7g3AyuP9DZa6t5kXk/AGTZI2ZjUj8Aca3V0MZAPzBEtl/DFpA/gFFJQmIb
YD+AIZdCF/s6PwCovG2pWCg/9IY7X2ImcD/ovqiMfmlBP9hcybFwEx8/AFak
JxaBCj8AkdH0zgJfPwALw9P1Ri8/AO7QpiEhCj8AAMQhOz/yPt1y5ew=
      "]}]]]]], "Output",
 CellChangeTimes->{{3.8946914932948275`*^9, 3.8946915150405083`*^9}},
 CellLabel->
  "Out[204]//MatrixForm=",ExpressionUUID->"49f7ef30-18ac-4cab-abd0-\
fbd779e8020b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sweeps Model version", "Section",
 CellChangeTimes->{{3.884769077714817*^9, 
  3.884769080549777*^9}},ExpressionUUID->"61b87fa0-691b-4f81-9513-\
7f4711491cf5"],

Cell["\<\
Now we focus on the GF with the star-like approximation embedded. We will use \
this to fit selective sweep models. We expand and also the GF simplifying to \
help with the inverse Laplace transform. The inverse transform is required \
because we have a discrete event - the time of the sweep (Ta).\
\>", "Text",
 CellChangeTimes->{{3.884927947132328*^9, 3.884928068179463*^9}, {
  3.885532728824594*^9, 3.8855327714615684`*^9}, {3.8870886983882556`*^9, 
  3.8870887360189805`*^9}, {3.887089060817029*^9, 3.8870891047874565`*^9}, {
  3.8870891975403705`*^9, 3.8870892066864185`*^9}, {3.8870904162205954`*^9, 
  3.887090421529559*^9}, {3.8946915268731833`*^9, 
  3.8946915426230803`*^9}},ExpressionUUID->"8c47e7e3-3f5b-4b40-83e2-\
9e6f9f25a9e4"],

Cell["\<\
This code can take a while to evaluate so it is commented out and we use \
prebaked objects later on.\
\>", "Text",
 CellChangeTimes->{{3.887109758406869*^9, 
  3.8871098119245257`*^9}},ExpressionUUID->"4c42c7c4-ab3e-4ee5-955a-\
a1600c5f3f82"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"gfd", " ", "=", " ", 
    RowBox[{"GFstar", "[", 
     RowBox[{"\[Alpha]", ",", "\[Omega]", ",", "samples", ",", 
      RowBox[{"{", "\[Delta]", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"gfd", " ", "=", " ", 
    RowBox[{"FoldSFS", "[", 
     RowBox[{"gfd", ",", "\[Omega]", ",", "6"}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"gfdExpanded", " ", "=", " ", 
    RowBox[{"gfd", "//", "Expand"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"gfdExpandedSimplifiedP", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "//.", 
       RowBox[{"subAllPeeToEpsilon", "[", "6", "]"}]}], " ", "&"}], "/@", 
     "gfdExpanded"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"gfTaFoldedP", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"InverseLaplaceTransform", "[", 
       RowBox[{
        RowBox[{"#", "/", "\[Delta]"}], ",", "\[Delta]", ",", "Ta"}], "]"}], 
      "&"}], "/@", "gfdExpandedSimplifiedP"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"gfTaAlphaFolded", " ", "=", " ", 
    RowBox[{"gfTaFoldedP", "/.", 
     RowBox[{"P", "\[Rule]", "PknToAlpha"}]}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"branchTypesAlphaFolded", " ", "=", " ", 
    RowBox[{
     RowBox[{"GetVars", "[", 
      RowBox[{"\[Omega]", ",", "gfTaAlphaFolded"}], "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Omega]", "[", "x_", "]"}], "\[RuleDelayed]", " ", "x"}], 
      "}"}]}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.884944184335533*^9, 3.884944184438789*^9}, {
   3.884944258546564*^9, 3.884944258732808*^9}, {3.884950149058034*^9, 
   3.884950149100869*^9}, {3.886227097113839*^9, 3.8862270973741217`*^9}, {
   3.886231409661296*^9, 3.8862314102236624`*^9}, {3.8862317349454913`*^9, 
   3.886231762815544*^9}, {3.8862318697525005`*^9, 3.8862318698267517`*^9}, {
   3.887088740971382*^9, 3.88708874854315*^9}, 3.88708879944425*^9, {
   3.887089005295228*^9, 3.8870890477480373`*^9}, 3.887089821097617*^9, {
   3.8871098167167416`*^9, 3.887109820224347*^9}, {3.887962330301354*^9, 
   3.88796233284585*^9}, {3.887980013099305*^9, 3.8879800157760396`*^9}, {
   3.888135198989438*^9, 3.8881352020556154`*^9}, {3.88814297806573*^9, 
   3.8881429809524546`*^9}, {3.8881434699333577`*^9, 
   3.8881434730151153`*^9}, {3.8881450517093067`*^9, 3.888145054258356*^9}, {
   3.8883936785009155`*^9, 3.888393680627886*^9}, {3.88873691828227*^9, 
   3.8887369215472655`*^9}, {3.8909675750215406`*^9, 
   3.8909675772117405`*^9}, {3.8909691115918584`*^9, 3.8909691142871747`*^9}},
 
 CellLabel->
  "In[163]:=",ExpressionUUID->"728de99d-f4b7-45ae-94c0-81a119f1f7a1"],

Cell["\<\
We make a symbolic probTable for the sweep model (similar to above)\
\>", "Text",
 CellChangeTimes->{{3.8870898548336697`*^9, 3.887089890585464*^9}, {
  3.894691552326799*^9, 
  3.8946915551465273`*^9}},ExpressionUUID->"5f804567-5dcb-41b6-9dc6-\
0b4300d469b7"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"probTableFoldedAlpha", " ", "=", " ", 
    RowBox[{"MakeProbTable", "[", 
     RowBox[{
     "gfTaAlphaFolded", ",", "\[Omega]", ",", "\[Theta]", ",", 
      "branchTypesAlphaFolded", ",", "kmax"}], "]"}]}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.887089796690521*^9, 3.887089827715987*^9}, {
  3.8871098266108274`*^9, 3.887109829234861*^9}, {3.8879624020939136`*^9, 
  3.8879624043931026`*^9}, {3.8879800193152695`*^9, 3.8879800220872755`*^9}, {
  3.8881352110493193`*^9, 3.8881352135618887`*^9}, {3.888142984702487*^9, 
  3.8881429875993786`*^9}, {3.8881434766920595`*^9, 3.8881434810852685`*^9}, {
  3.8881450570709443`*^9, 3.888145059748681*^9}, {3.888393691647018*^9, 
  3.888393693598647*^9}, {3.888736926235053*^9, 3.88873692926727*^9}, {
  3.8909675854038544`*^9, 3.8909675878191786`*^9}, {3.8909691168717775`*^9, 
  3.8909691195453224`*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"a0af5989-a3d0-46d9-a785-fde1b1ba2f53"],

Cell["\<\
Again, we can substitute in values to obtain mutation probabilities for a \
specific parameter combination, but this is slow so we will not evaluate it \
here.\
\>", "Text",
 CellChangeTimes->{{3.8870898991144876`*^9, 3.8870899380524654`*^9}, {
  3.8870901609007273`*^9, 3.887090180799445*^9}, {3.887090502907855*^9, 
  3.8870905120119886`*^9}},ExpressionUUID->"026061e2-beae-47f3-b142-\
3bae786132ca"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"AbsoluteTiming", "[", 
   RowBox[{"MatrixForm", "@", 
    RowBox[{"SubstituteSparseArray", "[", 
     RowBox[{"probTableFoldedAlpha", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Theta]", " ", "\[Rule]", " ", "0.75"}], ",", " ", 
        RowBox[{"Ta", " ", "->", " ", "0.1"}], ",", " ", 
        RowBox[{"\[Alpha]", " ", "->", " ", "0.1"}]}], "}"}]}], "]"}]}], 
   "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8870900009724736`*^9, 3.887090078935368*^9}, {
  3.8870901859454055`*^9, 3.8870901890547094`*^9}, {3.887090525577137*^9, 
  3.887090540795656*^9}, {3.8870906952014527`*^9, 3.8870906987711115`*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"345f9982-29bd-4bb3-88bc-19557e9944de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interpolation", "Section",
 CellChangeTimes->{{3.884943066501515*^9, 
  3.884943069404378*^9}},ExpressionUUID->"a639e589-f031-44d2-ae5a-\
b331f187e6b3"],

Cell["\<\
It takes a long time to evaluate these probabilities, particularly for \
configs with a large number of mutations and longer symbolic expressions. \
Instead, we will use a simple interpolation to speed up these calculations. \
\>", "Text",
 CellChangeTimes->{{3.8849466650032663`*^9, 3.884946798067936*^9}, {
  3.8849483021255083`*^9, 3.88494837030639*^9}, {3.8855331600210733`*^9, 
  3.8855331632202625`*^9}, {3.885533600985495*^9, 
  3.885533601684635*^9}},ExpressionUUID->"7b389fca-ddc9-4390-b7bc-\
30fb8f09fdb3"],

Cell["\<\
For a grid of alpha, Ta and theta we calculate numeric probtables and then \
interpolate linearly between them. This means that we can look up the \
probability of a bSFS entry for a specific alpha, Ta, and theta value, \
without having to calculate it each time.\
\>", "Text",
 CellChangeTimes->{{3.8852666542402678`*^9, 3.885266740089078*^9}, {
   3.885266815448048*^9, 3.885266834331039*^9}, {3.885266901503689*^9, 
   3.885266958265785*^9}, {3.885273108119587*^9, 3.88527315109383*^9}, {
   3.885273675766268*^9, 3.8852736874493847`*^9}, {3.8855337047606726`*^9, 
   3.8855337081307707`*^9}, 3.887091840970229*^9, {3.88709188285539*^9, 
   3.887091942294575*^9}, {3.8879799777659645`*^9, 3.887979987409852*^9}, {
   3.894691584402803*^9, 
   3.894691616163571*^9}},ExpressionUUID->"7c9dcfcf-7c24-4ea1-b471-\
d9ce2ba33b47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"InterpolateSweepConfigProb", "[", " ", 
   RowBox[{
   "expr_", ",", " ", "\[Theta]_", ",", "\[Theta]Grid_", ",", " ", 
    "\[Alpha]_", ",", " ", "\[Alpha]Grid_", ",", "Ta_", ",", "TaGrid_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "f", ",", "tab", ",", "fInterpolated", ",", "th", ",", " ", "a", ",", 
      "ta"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "expr", " ", "is", " ", "the", " ", "symbolic", " ", "probability", " ", 
      "from", " ", "probTable"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"\[Theta]", ",", " ", "\[Alpha]", ",", " ", 
      RowBox[{
      "and", " ", "Ta", " ", "are", " ", "the", " ", "names", " ", "of", " ", 
       "the", " ", "dummy", " ", "variables", " ", "in", " ", 
       RowBox[{"expression", " ", "'"}], 
       RowBox[{"expr", "'"}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "\[Theta]Grid", " ", "\[Alpha]Grid", " ", "and", " ", "TaGrid", " ", 
      "are", " ", "lists"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"a_", ",", "ta_", ",", " ", "th_"}], "]"}], "=", 
      RowBox[{"expr", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\[Alpha]", "\[Rule]", "a"}], ",", 
         RowBox[{"Ta", "\[Rule]", "ta"}], ",", " ", 
         RowBox[{"\[Theta]", "\[Rule]", "th"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"expr", "\[Equal]", "0"}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "*", "0"}], "+", 
          RowBox[{"#2", "*", "0"}], "+", 
          RowBox[{"#3", "*", "0"}]}], "&"}], "]"}]}], "]"}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"that", " ", "is"}], ",", " ", 
       RowBox[{
       "if", " ", "it", " ", "is", " ", "default", " ", "entry", " ", "of", 
        " ", "0"}], ",", " ", 
       RowBox[{
       "return", " ", "a", " ", "function", " ", "that", " ", "itself", " ", 
        "returns", " ", "0", " ", "when", " ", "evaluated", " ", "with", " ", 
        "three", " ", "params"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "the", " ", "grids", " ", "must", " ", "be", " ", "Rational", " ", 
        "numbers"}], ",", " ", 
       RowBox[{"i", ".", "e", "."}], ",", " ", 
       RowBox[{
        RowBox[{"1", "/", "100"}], " ", "instead", " ", "of", " ", "0.01", 
        " ", "otherwise", " ", "get", " ", "big", " ", "rounding", " ", 
        "error", " ", "problems"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"for", " ", "interpolation"}], ",", " ", 
       RowBox[{
       "the", " ", "full", " ", "expression", " ", "needs", " ", "tobe", " ", 
        "evaluated", " ", "numerically", " ", "first"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "slower", " ", "to", " ", "parallelize", " ", "it", " ", "in", " ", 
       "this", " ", "function", " ", "when", " ", "expressions", " ", "get", 
       " ", "big", " ", 
       RowBox[{"(", 
        RowBox[{
        "maybe", " ", "passing", " ", "the", " ", "expression", " ", "around",
          " ", "is", " ", 
         RowBox[{"costly", "?"}]}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"tab", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"aa", ",", "taa", ",", " ", "tha"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"aa", ",", "\[Alpha]Grid"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"taa", ",", "TaGrid"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"tha", ",", " ", "\[Theta]Grid"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tab", " ", "=", " ", 
      RowBox[{"N", "[", "tab", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fInterpolated", " ", "=", " ", 
      RowBox[{"ListInterpolation", "[", 
       RowBox[{"tab", ",", 
        RowBox[{"{", 
         RowBox[{"\[Alpha]Grid", ",", "TaGrid", ",", " ", "\[Theta]Grid"}], 
         "}"}], ",", 
        RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Finished an entry\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fInterpolated", "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.885266842378139*^9, 3.885266898527081*^9}, {
   3.8852669602432528`*^9, 3.885267399457986*^9}, {3.8852718497457647`*^9, 
   3.88527185697062*^9}, {3.885271923289843*^9, 3.8852719364505672`*^9}, {
   3.885272035992075*^9, 3.885272089299605*^9}, {3.885272650286207*^9, 
   3.885272688737431*^9}, {3.88527273360635*^9, 3.885272744560895*^9}, 
   3.8852728851965837`*^9, {3.88527304668095*^9, 3.88527307793652*^9}, {
   3.885273697675561*^9, 3.885273698777843*^9}, {3.885285240019369*^9, 
   3.8852852422268457`*^9}, {3.88529471839504*^9, 3.885294727681754*^9}, {
   3.8852955848191566`*^9, 3.885295586955853*^9}, {3.8853562245186567`*^9, 
   3.88535622730136*^9}, {3.88535956631082*^9, 3.885359649558662*^9}, {
   3.8859857218534017`*^9, 3.8859858296739025`*^9}, 3.8859858892909794`*^9, {
   3.8862487690686054`*^9, 3.88624877444137*^9}, {3.886249131214966*^9, 
   3.8862491325201845`*^9}, {3.8870918685335803`*^9, 
   3.8870918688771343`*^9}, {3.887962653309763*^9, 3.8879627304961386`*^9}, {
   3.8879627784463654`*^9, 3.8879628301051803`*^9}, {3.8879629266102858`*^9, 
   3.8879630205041494`*^9}, {3.8879755641412554`*^9, 3.887975573015669*^9}, {
   3.887978070734812*^9, 3.887978071956512*^9}, {3.8879783231720405`*^9, 
   3.8879783403620453`*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"61be4f1b-8f54-47b6-8df0-4278f22f7231"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"thetaGrid", " ", "=", " ", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "/", "10"}], ",", " ", 
      RowBox[{"8", "/", "10"}], ",", " ", 
      RowBox[{"1", "/", "10"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"alphaGrid", "=", " ", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "6", ",", 
       RowBox[{"2", "/", "10"}]}], "]"}], "~", "Join", "~", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{"6", "+", "1"}], ",", "12", ",", "1"}], "]"}]}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"taGrid", " ", "=", " ", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "1", ",", 
      RowBox[{"1", "/", "10"}]}], "]"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.887962439522094*^9, 3.8879624708252325`*^9}, {
  3.8879625233125477`*^9, 3.8879625283705792`*^9}, {3.8879799435760355`*^9, 
  3.8879799468063307`*^9}, {3.8881352983087487`*^9, 3.888135341072153*^9}, {
  3.8881429342925835`*^9, 3.888142954729681*^9}, {3.888143488235074*^9, 
  3.888143850036336*^9}, {3.888145044193501*^9, 3.88814504636924*^9}, {
  3.8883937184309464`*^9, 3.888393721104864*^9}, {3.8883938219817142`*^9, 
  3.88839383870818*^9}, {3.888736937947937*^9, 3.888736950145479*^9}, {
  3.894690483909937*^9, 3.8946904845077887`*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"e1bb4a23-77c4-4103-a8e3-39f886f495d1"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
   RowBox[{"numProbTableSweepFoldedThetaKmax2AllMarginals", "=", 
    RowBox[{"SparseArray", "[", "\[IndentingNewLine]", " ", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
           "\[Rule]", " ", 
          RowBox[{"InterpolateSweepConfigProb", "[", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            "\[Theta]", ",", "thetaGrid", ",", "\[Alpha]", ",", "alphaGrid", 
            ",", "Ta", ",", "taGrid"}], "]"}]}], "&"}], ",", 
        RowBox[{"ArrayRules", "[", "probTableFoldedAlpha", "]"}]}], "]"}], 
      ",", 
      RowBox[{"Dimensions", "[", "probTableFoldedAlpha", "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.887962569174071*^9, 3.887962615947896*^9}, {
  3.8879744350188785`*^9, 3.8879744372120037`*^9}, {3.8879744863901424`*^9, 
  3.887974504239121*^9}, {3.887974587496193*^9, 3.8879746164282713`*^9}, {
  3.887974666497469*^9, 3.88797467492315*^9}, {3.887975536113055*^9, 
  3.887975537364873*^9}, {3.8879799557358313`*^9, 3.8879799584671855`*^9}, {
  3.8881353511054916`*^9, 3.888135353631861*^9}, {3.888142549488758*^9, 
  3.8881425511805897`*^9}, {3.8881429455348935`*^9, 3.8881429571546245`*^9}, {
  3.888143493195029*^9, 3.8881434953634615`*^9}, {3.8881437794239655`*^9, 
  3.888143780632479*^9}, {3.8881450293954897`*^9, 3.888145032005705*^9}, {
  3.8883937744651394`*^9, 3.8883937766692123`*^9}, {3.8887369644481397`*^9, 
  3.8887369670544415`*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"9eba90d2-cb4d-4007-9122-4ce51dad4398"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"DumpSave", "[", 
    RowBox[{
    "\"\<numProbTableSweepFoldedThetaKmax2AllMarginals.mx\>\"", ",", 
     "numProbTableSweepFoldedThetaKmax2AllMarginals"}], "]"}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8879631258054047`*^9, 3.8879631409723167`*^9}, {
  3.8879799637591295`*^9, 3.8879799659570665`*^9}, {3.8881353594428997`*^9, 
  3.888135361701517*^9}, {3.888142959620589*^9, 3.8881429624403715`*^9}, {
  3.8881434989540167`*^9, 3.8881435014702682`*^9}, {3.8881450345863934`*^9, 
  3.888145037041976*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"fd75244f-c2e5-4a7e-a4a4-efd26998037a"],

Cell["\<\
The values we substitute and those over which we interpolate need to be \
rational numbers, i.e. 1/100 rather than 0.01. This prevents rounding error. \
We have made an interpolated grid outside of this notebook that we can read \
in.\
\>", "Text",
 CellChangeTimes->{{3.885368126482383*^9, 3.885368188358252*^9}, {
  3.8870920083322697`*^9, 3.8870920270992594`*^9}, {3.887092820322996*^9, 
  3.887092822165167*^9}},ExpressionUUID->"807b22cc-3b0e-4788-a7b0-\
f7ed266ab35d"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  "\"\<numProbTableSweepFoldedKmax2AllMarginalsWithThetaGrid_th_alpha_ta.mx\>\
\"", "]"}]], "Input",
 CellChangeTimes->{{3.88536771975124*^9, 3.885367737458253*^9}, {
   3.885367847264262*^9, 3.885367937014366*^9}, {3.885367974530755*^9, 
   3.885368039097543*^9}, 3.885368294761064*^9, {3.8855333903347054`*^9, 
   3.885533390586891*^9}, {3.8859861575980167`*^9, 3.885986182692256*^9}, {
   3.885992709875146*^9, 3.885992755089757*^9}, 3.8870920034571366`*^9, {
   3.88709208277124*^9, 3.8870920832065134`*^9}, {3.8879797197229047`*^9, 
   3.887979720092149*^9}, {3.888495599371904*^9, 3.888495600123006*^9}, {
   3.888495638984486*^9, 3.8884956399622335`*^9}, {3.888736992808324*^9, 
   3.888736993192524*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"2aee3893-f5d1-4ed6-9422-a6f77abcd37c"],

Cell["\<\
We can also make an interpolated grid for the neutral case which will help us \
later. We only have one parameter in the neutral case (theta), so we just \
make prob tables for many theta values and interpolate between them.\
\>", "Text",
 CellChangeTimes->{{3.8871059102770557`*^9, 3.887105935736288*^9}, {
  3.887108408404965*^9, 3.887108412593768*^9}, {3.8946916693012714`*^9, 
  3.894691703991596*^9}},ExpressionUUID->"3381a04c-d5f1-4252-b846-\
955693dd161f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"InterpolateNeutralConfigProb", "[", 
   RowBox[{"expr_", ",", " ", "\[Theta]_", ",", " ", "thetaGrid_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"f", ",", "tab", ",", "fInterpolated", ",", "theta"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "expr", " ", "is", " ", "the", " ", "symbolic", " ", "probability", " ", 
      "from", " ", "probTable"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "\[Theta]", " ", "is", " ", "the", " ", "dummy", " ", "variables", " ", 
      "in", " ", 
      RowBox[{"expression", " ", "'"}], 
      RowBox[{"expr", "'"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"thetaGrid", " ", "is", " ", "a", " ", "list"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", "theta_", "]"}], "=", 
      RowBox[{"expr", "/.", 
       RowBox[{"{", 
        RowBox[{"\[Theta]", "\[Rule]", "theta"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"expr", "\[Equal]", "0"}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{"#1", "*", "0"}], "]"}]}], "]"}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"that", " ", "is"}], ",", " ", 
       RowBox[{
       "if", " ", "it", " ", "is", " ", "default", " ", "entry", " ", "of", 
        " ", "0"}], ",", " ", 
       RowBox[{
       "return", " ", "a", " ", "function", " ", "that", " ", "itself", " ", 
        "returns", " ", "0"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "the", " ", "thetaGrid", " ", "must", " ", "be", " ", "Rational", " ", 
        "numbers"}], ",", " ", 
       RowBox[{"i", ".", "e", "."}], ",", " ", 
       RowBox[{
        RowBox[{"1", "/", "100"}], " ", "instead", " ", "of", " ", "0.01", 
        " ", "otherwise", " ", "get", " ", "big", " ", "rounding", " ", 
        "error", " ", "problems"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"for", " ", "interpolation"}], ",", " ", 
       RowBox[{
       "the", " ", "full", " ", "expression", " ", "needs", " ", "tobe", " ", 
        "evaluated", " ", "numerically", " ", "first"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "slower", " ", "to", " ", "parallelize", " ", "it", " ", "in", " ", 
       "this", " ", "function", " ", "when", " ", "expressions", " ", "get", 
       " ", "big", " ", 
       RowBox[{"(", 
        RowBox[{
        "maybe", " ", "passing", " ", "the", " ", "expression", " ", "around",
          " ", "is", " ", 
         RowBox[{"costly", "?"}]}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"tab", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"f", "[", "thetaVal", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"thetaVal", ",", "thetaGrid"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tab", " ", "=", " ", 
      RowBox[{"N", "[", "tab", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fInterpolated", " ", "=", " ", 
      RowBox[{"ListInterpolation", "[", 
       RowBox[{"tab", ",", 
        RowBox[{"{", "thetaGrid", "}"}], ",", 
        RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fInterpolated", "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Code",
 CellChangeTimes->{{3.887105946677845*^9, 3.8871061096295843`*^9}, {
   3.8871061534988766`*^9, 3.8871061913425417`*^9}, {3.887106236274452*^9, 
   3.8871062388746943`*^9}, 3.887106484102786*^9, {3.8871065559107523`*^9, 
   3.8871065567452955`*^9}, {3.8871066510714397`*^9, 3.887106654924192*^9}, {
   3.887107596164338*^9, 3.8871076013577323`*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"ad2ca442-995f-4e0c-9074-556370361eb8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"thetaGrid", "  ", "=", " ", 
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{"1", "/", "100"}], ",", 
       RowBox[{"3", "/", "2"}], ",", 
       RowBox[{"1", "/", "1000"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"numProbTableNeutralFoldedKmax2AllMarginals", "=", 
     RowBox[{"SparseArray", "[", "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "\[Rule]", " ", 
           RowBox[{"InterpolateNeutralConfigProb", "[", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
              "\[Theta]", ",", "thetaGrid"}], "]"}]}], "&"}], ",", 
         RowBox[{"ArrayRules", "[", "probTableFoldedNeutral", "]"}]}], "]"}], 
       ",", 
       RowBox[{"Dimensions", "[", "probTableFoldedNeutral", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", 
    RowBox[{"DumpSave", "[", 
     RowBox[{
     "\"\<numProbTableNeutralFoldedKmax2AllMarginals.mx\>\"", ",", 
      "numProbTableNeutralFoldedKmax2AllMarginals"}], "]"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
  "Get", "[", "\"\<numProbTableNeutralFoldedKmax2AllMarginals.mx\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.887106660999311*^9, 3.88710680419708*^9}, {
   3.8871069499334345`*^9, 3.8871069960256376`*^9}, {3.8871070492698493`*^9, 
   3.8871070769632697`*^9}, {3.8871071389700165`*^9, 
   3.8871071414432073`*^9}, {3.8871074175777397`*^9, 
   3.8871074176397305`*^9}, {3.8871074726963916`*^9, 3.8871074727446623`*^9}, 
   3.8871075067674747`*^9, {3.887107660163303*^9, 3.887107662990411*^9}, {
   3.8871077234505205`*^9, 3.8871077262604103`*^9}, 3.887107772435663*^9, {
   3.887107974024987*^9, 3.887108017060748*^9}, {3.8871080560739717`*^9, 
   3.8871081354669695`*^9}, {3.887108178945248*^9, 3.8871082021069074`*^9}, {
   3.8871083927291803`*^9, 3.8871083992445807`*^9}, {3.887978833983014*^9, 
   3.8879788351732545`*^9}, {3.888470386691065*^9, 3.8884704396986246`*^9}, {
   3.888470491646117*^9, 3.8884704918306513`*^9}, {3.8887371147078815`*^9, 
   3.8887371173067465`*^9}, {3.8946905138093185`*^9, 3.894690514086645*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"9de69286-a89e-44d7-8b22-fe3060493b25"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pulling in some real data for sweep inference", "Section",
 CellChangeTimes->{{3.885276594340596*^9, 3.8852766191622353`*^9}, {
  3.887109866149682*^9, 
  3.887109868318839*^9}},ExpressionUUID->"26af2b23-9b35-4f3a-a4b8-\
477af8cc929f"],

Cell["\<\
Here we read in real data. The form of the data is: seq, block_start, \
block_end, sample_string, mutation_configuration.\
\>", "Text",
 CellChangeTimes->{{3.8870965392179527`*^9, 3.8870965695315723`*^9}, {
  3.8946917110026827`*^9, 
  3.894691742328307*^9}},ExpressionUUID->"86aa3d04-f667-44d8-ab87-\
04557634b0a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"columnNames", " ", "=", "  ", 
  RowBox[{
   RowBox[{"Import", "[", "filePath", "]"}], "\[LeftDoubleBracket]", "1", 
   "\[RightDoubleBracket]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xs", " ", "=", " ", 
   RowBox[{
    RowBox[{"Import", "[", "filePath", "]"}], "\[LeftDoubleBracket]", 
    RowBox[{"2", ";;"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"xs", "[", 
  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"xs", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.885275289436719*^9, 3.8852753103264837`*^9}, {
   3.885276370248413*^9, 3.88527638776777*^9}, {3.885533427894476*^9, 
   3.88553343625407*^9}, {3.885533863102393*^9, 3.8855338652738066`*^9}, {
   3.8855365561298685`*^9, 3.8855365619434576`*^9}, {3.887096753021492*^9, 
   3.8870967530743484`*^9}, {3.8897959023095117`*^9, 
   3.8897959161489506`*^9}, {3.889795991516631*^9, 3.8897959992551956`*^9}, {
   3.8897999359791837`*^9, 3.889800041095498*^9}, {3.8898064582130666`*^9, 
   3.8898064980760937`*^9}, {3.8898090740302997`*^9, 3.889809099036768*^9}, {
   3.889819631185122*^9, 3.8898196538931704`*^9}, {3.8898434882832522`*^9, 
   3.8898435214050508`*^9}, {3.889852691531694*^9, 3.889852696454653*^9}, {
   3.8898527272177567`*^9, 3.889852758686845*^9}, {3.8898613474959497`*^9, 
   3.889861419891892*^9}, {3.8898671785364733`*^9, 3.8898672242309217`*^9}, {
   3.889891062778195*^9, 3.889891071403537*^9}, {3.8899293425082707`*^9, 
   3.8899293521355143`*^9}, {3.8899293850301523`*^9, 3.889929385108492*^9}, {
   3.8899356702212296`*^9, 3.88993572297388*^9}, {3.8899415862738934`*^9, 
   3.889941654796671*^9}, {3.8899556351711893`*^9, 3.8899556688013363`*^9}, {
   3.8899557016553955`*^9, 3.8899557712983685`*^9}, {3.8900185931155677`*^9, 
   3.890018600402833*^9}, {3.8900186633040133`*^9, 3.890018718407968*^9}, {
   3.8900289584088216`*^9, 3.8900290349451647`*^9}, {3.890039271569704*^9, 
   3.8900393317317204`*^9}, {3.8900416199651375`*^9, 3.890041655544199*^9}, {
   3.8900424695966167`*^9, 3.8900424784740524`*^9}, {3.8900425312142305`*^9, 
   3.89004253639399*^9}, {3.890042587273807*^9, 3.8900425923879194`*^9}, {
   3.890042632464035*^9, 3.8900426329939814`*^9}, {3.8900451383521547`*^9, 
   3.89004514411086*^9}, {3.890045183592148*^9, 3.8900451907507925`*^9}, {
   3.8900454384119205`*^9, 3.8900454440462465`*^9}, {3.890045488988697*^9, 
   3.890045489058833*^9}, {3.890045527911072*^9, 3.890045528823146*^9}, {
   3.8900481450631833`*^9, 3.8900481546507397`*^9}, {3.8900481889705133`*^9, 
   3.8900481895601864`*^9}, {3.8900482226271086`*^9, 3.890048222702402*^9}, {
   3.890048256710351*^9, 3.8900482567628284`*^9}, {3.890059967507927*^9, 
   3.890059971771495*^9}, {3.8900600446265273`*^9, 3.8900601158401356`*^9}, {
   3.89006151085937*^9, 3.890061548817048*^9}, {3.890061586667738*^9, 
   3.8900615874564347`*^9}, {3.890061631476745*^9, 3.890061702634495*^9}, {
   3.890104162688383*^9, 3.890104168463021*^9}, {3.8901042002338543`*^9, 
   3.890104207059661*^9}, {3.890108554559577*^9, 3.8901086712243023`*^9}, {
   3.890121761223208*^9, 3.8901218131046615`*^9}, {3.890127750640778*^9, 
   3.890127755203122*^9}, {3.890127792587426*^9, 3.8901277926367235`*^9}, {
   3.8901278413662663`*^9, 3.8901278414240255`*^9}, {3.890131581746359*^9, 
   3.8901315835177307`*^9}, {3.890144247234669*^9, 3.890144250020458*^9}, {
   3.890144298525361*^9, 3.8901443083885393`*^9}, {3.8901443464896927`*^9, 
   3.890144359956313*^9}, {3.890150766643176*^9, 3.890150770621645*^9}, {
   3.8901508164801064`*^9, 3.8901508252772427`*^9}, {3.89019390713003*^9, 
   3.8901939173828964`*^9}, {3.8901939502752857`*^9, 3.890193954273956*^9}, {
   3.8901940048773427`*^9, 3.890194020979291*^9}, {3.890196864316271*^9, 
   3.890196868095356*^9}, {3.890241627744052*^9, 3.8902416723802752`*^9}, {
   3.890277083014188*^9, 3.8902770891651382`*^9}, {3.8902798154335814`*^9, 
   3.8902798709708405`*^9}, {3.890285493667376*^9, 3.890285496915039*^9}, {
   3.890285966978677*^9, 3.8902859728647537`*^9}, {3.8903844143612366`*^9, 
   3.8903844195196037`*^9}, {3.8903844965294733`*^9, 3.890384499905698*^9}, {
   3.8904034611739073`*^9, 3.890403465892027*^9}, {3.890403526055628*^9, 
   3.890403534343156*^9}, {3.8904035739963565`*^9, 3.890403574473451*^9}, {
   3.890407445706056*^9, 3.8904074584783635`*^9}, {3.890407511377736*^9, 
   3.890407512636933*^9}, {3.8904110178815804`*^9, 3.890411024999235*^9}, {
   3.8904110582642536`*^9, 3.890411059338086*^9}, {3.890411096058525*^9, 
   3.8904110967552385`*^9}, {3.8904112745621834`*^9, 3.8904112880656567`*^9}, 
   3.890411529068041*^9, {3.8904116994599915`*^9, 3.8904117107820377`*^9}, {
   3.8904117448498564`*^9, 3.8904117475661397`*^9}, {3.890411783225202*^9, 
   3.8904117951652346`*^9}, {3.8904118271188536`*^9, 3.890411827185137*^9}, {
   3.8904118624943504`*^9, 3.890411865236536*^9}, {3.890453245623394*^9, 
   3.890453257235239*^9}, {3.8904533170921173`*^9, 3.890453402733342*^9}, {
   3.890717181279582*^9, 3.890717187747341*^9}, {3.890717243776273*^9, 
   3.8907172484822474`*^9}, {3.8907175531540375`*^9, 
   3.8907175532981014`*^9}, {3.8907176180991535`*^9, 3.89071763191273*^9}, {
   3.890717710195753*^9, 3.890717720769641*^9}, {3.8907178543950863`*^9, 
   3.8907178552779913`*^9}, {3.8907249893338833`*^9, 
   3.8907250023457174`*^9}, {3.8907251280346084`*^9, 
   3.8907251301198945`*^9}, {3.890725201711729*^9, 3.8907252355331583`*^9}, {
   3.890725345520131*^9, 3.8907253459149375`*^9}, {3.890733406117133*^9, 
   3.890733412712378*^9}, {3.890733528885947*^9, 3.8907335298515606`*^9}, {
   3.890733581994352*^9, 3.8907335825483065`*^9}, {3.890733629176051*^9, 
   3.8907336301997533`*^9}, {3.8907336800049295`*^9, 
   3.8907336801940217`*^9}, {3.890797743029413*^9, 3.8907977517100177`*^9}, {
   3.89079780751195*^9, 3.8907978666844406`*^9}, {3.8908197395820794`*^9, 
   3.8908198118248205`*^9}, {3.8908834446418533`*^9, 3.890883449226487*^9}, {
   3.8908835285016203`*^9, 3.8908836050879993`*^9}, {3.890908143491785*^9, 
   3.8909081449975433`*^9}, {3.8913995354772778`*^9, 3.891399536470853*^9}, {
   3.891399655098385*^9, 3.8913996551616936`*^9}, {3.8914003023386927`*^9, 
   3.8914003077725*^9}, {3.8914030367448215`*^9, 3.8914030423678226`*^9}, {
   3.8914032234809723`*^9, 3.8914032239077516`*^9}, {3.8914033066876197`*^9, 
   3.891403306934497*^9}, {3.8914278837571297`*^9, 3.8914278999508977`*^9}, {
   3.891436802780202*^9, 3.8914368094827814`*^9}, {3.8914368506273794`*^9, 
   3.89143685341523*^9}, {3.89148205013221*^9, 3.891482056005647*^9}, {
   3.891482092998468*^9, 3.8914820932491417`*^9}, {3.8914847443257914`*^9, 
   3.891484747641341*^9}, {3.8915685212691884`*^9, 3.891568535065341*^9}, {
   3.8915686313555374`*^9, 3.8915686320054426`*^9}, {3.891568688346151*^9, 
   3.891568688398117*^9}, {3.891576612591815*^9, 3.891576618877821*^9}, {
   3.891576744952634*^9, 3.8915767488443213`*^9}, {3.8915823187840676`*^9, 
   3.891582328290268*^9}, {3.8915823781415405`*^9, 3.891582378188682*^9}, {
   3.891589397065735*^9, 3.891589405860132*^9}, {3.891589533450384*^9, 
   3.8915895467827845`*^9}, {3.8915897107599196`*^9, 3.891589714275665*^9}, {
   3.891653176293449*^9, 3.8916532033206234`*^9}, {3.8916532807846823`*^9, 
   3.8916533022030535`*^9}, {3.8916534389136577`*^9, 3.891653462052693*^9}, {
   3.8916535112250843`*^9, 3.8916535113894224`*^9}, {3.891656240543209*^9, 
   3.891656247692627*^9}, {3.8916563068034086`*^9, 3.8916563068980856`*^9}, {
   3.8916640199076977`*^9, 3.8916640207588453`*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"703b2cdd-db91-401e-9a97-5562313925a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"seqs\"\>", ",", "\<\"start\"\>", ",", "\<\"end\"\>", 
   ",", "\<\"samples\"\>", ",", "\<\"variation\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.8852753110485497`*^9, {3.885276376205946*^9, 3.885276388159782*^9}, 
   3.88535751318001*^9, {3.885533852374689*^9, 3.885533865748112*^9}, 
   3.8855363912226334`*^9, 3.885536593584613*^9, 3.885536789170961*^9, 
   3.8855369509414177`*^9, 3.885537475532503*^9, 3.88554804164942*^9, 
   3.885548398669179*^9, 3.885550050630603*^9, 3.885550763610898*^9, 
   3.8855514826291914`*^9, 3.8855520760195484`*^9, 3.885552526564357*^9, 
   3.8855535082919884`*^9, 3.8855545557536354`*^9, 3.885557049472746*^9, 
   3.8856152196381555`*^9, 3.8856199286421447`*^9, 3.885619981407256*^9, 
   3.8856200415815024`*^9, 3.8856276014641237`*^9, 3.885628027677825*^9, 
   3.885628089982072*^9, 3.885964972277747*^9, 3.885985027225238*^9, 
   3.8870967207738934`*^9, 3.8870967537043915`*^9, 3.8870970783871403`*^9, 
   3.8870995355735717`*^9, 3.8871094671811247`*^9, 3.8875306217075305`*^9, 
   3.887533114742771*^9, 3.8875356854485173`*^9, 3.887536154360077*^9, 
   3.887692736004139*^9, 3.8876930951697435`*^9, 3.887693130829257*^9, 
   3.887693166790639*^9, 3.8876932892767634`*^9, 3.887696199859477*^9, 
   3.8876997607949195`*^9, 3.8877988967715673`*^9, 3.887799738868802*^9, 
   3.8878649797262297`*^9, 3.887880488721858*^9, 3.887881066205755*^9, 
   3.88788603416656*^9, 3.8879536459427404`*^9, 3.8879548322101817`*^9, 
   3.8879605592193766`*^9, 3.88796062197838*^9, 3.8879607739394317`*^9, 
   3.8879788411788826`*^9, 3.8879800837203207`*^9, 3.888143206858*^9, 
   3.888143359238023*^9, 3.8881434120577955`*^9, 3.888145135644201*^9, 
   3.888145168599328*^9, 3.888145207063862*^9, 3.8881452405275745`*^9, 
   3.8881452799914184`*^9, 3.888157554089636*^9, 3.8881576482828627`*^9, 
   3.8887372137710295`*^9, 3.8887408314807234`*^9, 3.8887486009673724`*^9, 
   3.888749225228243*^9, 3.888749289347271*^9, 3.888749422401123*^9, 
   3.888753523569858*^9, 3.8887697353178525`*^9, 3.8888133216022277`*^9, 
   3.8888211502725625`*^9, 3.888824942719178*^9, 3.888830963222637*^9, 
   3.888834206853443*^9, 3.888897855322736*^9, 3.8889040666252527`*^9, 
   3.8889092446111193`*^9, 3.8889180485158367`*^9, 3.888923698427111*^9, 
   3.888923924656926*^9, 3.8889246167443714`*^9, 3.8889257002672086`*^9, 
   3.8889267091048727`*^9, 3.888983628576912*^9, 3.8889864875580063`*^9, 
   3.8889893435890975`*^9, 3.8890000502262087`*^9, 3.8890189627480235`*^9, 
   3.889019012884716*^9, 3.8890239799333534`*^9, 3.889069528027402*^9, 
   3.8890727515274754`*^9, 3.889075412340828*^9, 3.889080984696273*^9, 
   3.8890843669719152`*^9, 3.8891124838080463`*^9, 3.889160431963237*^9, 
   3.8891710137207413`*^9, 3.889246312971907*^9, 3.889252329720003*^9, 
   3.8892742201337643`*^9, 3.889279451441628*^9, 3.889293362715578*^9, 
   3.889335752257383*^9, 3.8893490936467276`*^9, 3.8893548554561634`*^9, 
   3.889438700350221*^9, 3.889438801263932*^9, 3.889439052750147*^9, 
   3.889439200080123*^9, 3.8894414293343735`*^9, 3.889501137542803*^9, 
   3.8895929729623384`*^9, 3.8896098296944346`*^9, 3.889626202268361*^9, 
   3.8896280416391892`*^9, 3.889629062543648*^9, 3.88963295292106*^9, 
   3.8896344690773635`*^9, 3.889634991672576*^9, 3.889635641853717*^9, 
   3.889671356175132*^9, 3.8896794145828505`*^9, 3.889697157145068*^9, 
   3.889713842517124*^9, 3.8897166886041765`*^9, 3.8897181747203484`*^9, 
   3.889718460208375*^9, 3.889767592063574*^9, 3.8897677452749195`*^9, 
   3.889773670090494*^9, 3.8897957642295475`*^9, 3.8897959309414387`*^9, 
   3.8897960117840877`*^9, 3.8897999504639397`*^9, {3.8897999804931965`*^9, 
   3.889800049228874*^9}, 3.88980009370046*^9, {3.8898064654816446`*^9, 
   3.889806529917054*^9}, {3.889809081405654*^9, 3.8898091064646516`*^9}, 
   3.8898195659980354`*^9, {3.889819642067735*^9, 3.8898196903388023`*^9}, {
   3.889843505084861*^9, 3.8898435282136717`*^9}, 3.889843584751946*^9, {
   3.889852710969293*^9, 3.8898527654633155`*^9}, 3.889852843931794*^9, {
   3.8898613559302845`*^9, 3.8898614478270454`*^9}, {3.8898671922913284`*^9, 
   3.889867257099184*^9}, 3.889891086847475*^9, 3.8899293631015167`*^9, 
   3.889929394741864*^9, 3.889929429144411*^9, {3.8899356799799557`*^9, 
   3.8899357294675884`*^9}, 3.8899357793820467`*^9, {3.8899415976123333`*^9, 
   3.889941679433074*^9}, {3.8899556514757338`*^9, 3.889955675344881*^9}, {
   3.8899557165784273`*^9, 3.8899558028208904`*^9}, 3.8900186147924614`*^9, {
   3.8900186774525075`*^9, 3.890018728727044*^9}, {3.8900289697222576`*^9, 
   3.890029060733079*^9}, {3.8900392912425385`*^9, 3.8900393648466463`*^9}, 
   3.890041708374031*^9, 3.890042503393766*^9, 3.890042554193991*^9, 
   3.8900426104641576`*^9, 3.890042660264347*^9, 3.890042716487626*^9, 
   3.890045159748083*^9, 3.890045205288885*^9, 3.8900454601061797`*^9, 
   3.890045505672022*^9, 3.890045549507938*^9, 3.8900456051719913`*^9, 
   3.890048170191894*^9, 3.890048204274443*^9, 3.89004823661082*^9, 
   3.890048284720346*^9, {3.8900600270879602`*^9, 3.8900600543469505`*^9}, {
   3.890060085488134*^9, 3.89006013984299*^9}, 3.890061520311358*^9, {
   3.890061554919094*^9, 3.8900615933301277`*^9}, {3.89006163899031*^9, 
   3.890061712875552*^9}, 3.890104180525921*^9, 3.8901042131358314`*^9, 
   3.8901042482153015`*^9, 3.890108566380054*^9, {3.890108604260872*^9, 
   3.8901086958102055`*^9}, {3.8901217774006805`*^9, 3.890121838402644*^9}, 
   3.890127762854725*^9, {3.8901278320663776`*^9, 3.8901278681355877`*^9}, 
   3.890132103188574*^9, 3.890144267428362*^9, 3.890144315358447*^9, 
   3.8901443662087817`*^9, 3.8901443999621196`*^9, 3.8901507961580753`*^9, 
   3.890150830828441*^9, 3.8901939268155193`*^9, 3.8901939625255156`*^9, {
   3.890194007985295*^9, 3.8901940322788796`*^9}, 3.890196923831743*^9, 
   3.890201114717187*^9, 3.890203375790527*^9, 3.890204589110495*^9, 
   3.8902046361089153`*^9, 3.890206650061038*^9, 3.890213860547999*^9, 
   3.8902139858604703`*^9, 3.8902187307324944`*^9, 3.89022060762595*^9, 
   3.890220801380798*^9, 3.8902209772489853`*^9, 3.8902210325765305`*^9, 
   3.8902254941517296`*^9, 3.8902289097608767`*^9, 3.890229878138154*^9, 
   3.890231146151808*^9, 3.890234298577649*^9, 3.8902358669738445`*^9, 
   3.8902382603196945`*^9, {3.890241639706476*^9, 3.8902416844462047`*^9}, {
   3.8902417215863075`*^9, 3.890241760102376*^9}, 3.8902774360930834`*^9, 
   3.890278015333103*^9, 3.890278100046251*^9, {3.890279827365496*^9, 
   3.89027987392507*^9}, 3.8902799862959857`*^9, 3.890280064183726*^9, 
   3.890285500654276*^9, 3.890285994357486*^9, 3.890287228208864*^9, 
   3.8902892923996944`*^9, 3.890289609808283*^9, {3.8903844801389213`*^9, 
   3.890384521960644*^9}, 3.890403494166383*^9, 3.890403549435137*^9, 
   3.890403622043475*^9, 3.890403676160954*^9, 3.8904074847687364`*^9, 
   3.890407544776926*^9, 3.8904110396450706`*^9, 3.890411075848171*^9, 
   3.8904111106113596`*^9, 3.8904113032049713`*^9, 3.8904115439090633`*^9, 
   3.890411726031389*^9, 3.8904117650313244`*^9, 3.8904118081502514`*^9, 
   3.8904118407298594`*^9, 3.890411879122403*^9, 3.8904532767899866`*^9, {
   3.8904533349423113`*^9, 3.8904534215897675`*^9}, 3.8904534921637115`*^9, 
   3.8907172184345856`*^9, 3.890717575257516*^9, 3.8907176538323355`*^9, 
   3.890717716027012*^9, 3.8907177715699463`*^9, 3.890717881080304*^9, 
   3.890717960124734*^9, 3.890725022493332*^9, 3.8907251498911552`*^9, 
   3.890725256284028*^9, 3.89072537854273*^9, 3.8907334313187265`*^9, 
   3.890733524866274*^9, 3.890733557445999*^9, 3.8907335990605774`*^9, 
   3.890733645511091*^9, 3.890733694055978*^9, 3.890733747016071*^9, 
   3.8907977933809357`*^9, {3.890797826375225*^9, 3.8907979083220196`*^9}, {
   3.890819748514407*^9, 3.890819842212592*^9}, {3.8908835164908295`*^9, 
   3.890883618311589*^9}, 3.8909082800876412`*^9, 3.890963258521935*^9, 
   3.8909691259225063`*^9, 3.8913996366044855`*^9, 3.8913996781371374`*^9, {
   3.891400317409751*^9, 3.891400345923274*^9}, 3.891403053061558*^9, 
   3.891403233318286*^9, 3.8914033159086647`*^9, 3.8914033484396505`*^9, 
   3.891427923836864*^9, 3.891436831624782*^9, 3.891436865013768*^9, 
   3.891436914196165*^9, 3.891481974167375*^9, 3.8914820173971615`*^9, 
   3.891482068846781*^9, 3.8914821034026527`*^9, 3.891482140819026*^9, {
   3.891484761276865*^9, 3.8914847909841585`*^9}, 3.891568604808538*^9, 
   3.891568648425314*^9, 3.891568715445574*^9, 3.891576651139839*^9, 
   3.8915767628894243`*^9, 3.8915768100924215`*^9, 3.891582357319253*^9, 
   3.8915824097141843`*^9, 3.8915824941483393`*^9, 3.8915894332102127`*^9, 
   3.8915895503778715`*^9, 3.8915896151198483`*^9, 3.8915897513036423`*^9, 
   3.8916531408652287`*^9, 3.8916531969165688`*^9, 3.8916532285914884`*^9, 
   3.891653293773965*^9, 3.8916533269100676`*^9, 3.891653477581403*^9, 
   3.891653531804982*^9, 3.8916535655749617`*^9, 3.891656268637117*^9, 
   3.891656322726125*^9, 3.8916563806425514`*^9, 3.8916640646528645`*^9, 
   3.8946908736853185`*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"3e6a95ee-04ef-4ef8-82c4-29f6743a6ad0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"brenthis_daphne.ES_BD_1141.chromosome_2\"\>", ",", "23443981", 
   ",", "23444255", ",", "\<\"FR_BD_1329,ES_BD_1141,ES_BD_1490\"\>", 
   ",", "\<\"2,0,1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.8852753110485497`*^9, {3.885276376205946*^9, 3.885276388159782*^9}, 
   3.88535751318001*^9, {3.885533852374689*^9, 3.885533865748112*^9}, 
   3.8855363912226334`*^9, 3.885536593584613*^9, 3.885536789170961*^9, 
   3.8855369509414177`*^9, 3.885537475532503*^9, 3.88554804164942*^9, 
   3.885548398669179*^9, 3.885550050630603*^9, 3.885550763610898*^9, 
   3.8855514826291914`*^9, 3.8855520760195484`*^9, 3.885552526564357*^9, 
   3.8855535082919884`*^9, 3.8855545557536354`*^9, 3.885557049472746*^9, 
   3.8856152196381555`*^9, 3.8856199286421447`*^9, 3.885619981407256*^9, 
   3.8856200415815024`*^9, 3.8856276014641237`*^9, 3.885628027677825*^9, 
   3.885628089982072*^9, 3.885964972277747*^9, 3.885985027225238*^9, 
   3.8870967207738934`*^9, 3.8870967537043915`*^9, 3.8870970783871403`*^9, 
   3.8870995355735717`*^9, 3.8871094671811247`*^9, 3.8875306217075305`*^9, 
   3.887533114742771*^9, 3.8875356854485173`*^9, 3.887536154360077*^9, 
   3.887692736004139*^9, 3.8876930951697435`*^9, 3.887693130829257*^9, 
   3.887693166790639*^9, 3.8876932892767634`*^9, 3.887696199859477*^9, 
   3.8876997607949195`*^9, 3.8877988967715673`*^9, 3.887799738868802*^9, 
   3.8878649797262297`*^9, 3.887880488721858*^9, 3.887881066205755*^9, 
   3.88788603416656*^9, 3.8879536459427404`*^9, 3.8879548322101817`*^9, 
   3.8879605592193766`*^9, 3.88796062197838*^9, 3.8879607739394317`*^9, 
   3.8879788411788826`*^9, 3.8879800837203207`*^9, 3.888143206858*^9, 
   3.888143359238023*^9, 3.8881434120577955`*^9, 3.888145135644201*^9, 
   3.888145168599328*^9, 3.888145207063862*^9, 3.8881452405275745`*^9, 
   3.8881452799914184`*^9, 3.888157554089636*^9, 3.8881576482828627`*^9, 
   3.8887372137710295`*^9, 3.8887408314807234`*^9, 3.8887486009673724`*^9, 
   3.888749225228243*^9, 3.888749289347271*^9, 3.888749422401123*^9, 
   3.888753523569858*^9, 3.8887697353178525`*^9, 3.8888133216022277`*^9, 
   3.8888211502725625`*^9, 3.888824942719178*^9, 3.888830963222637*^9, 
   3.888834206853443*^9, 3.888897855322736*^9, 3.8889040666252527`*^9, 
   3.8889092446111193`*^9, 3.8889180485158367`*^9, 3.888923698427111*^9, 
   3.888923924656926*^9, 3.8889246167443714`*^9, 3.8889257002672086`*^9, 
   3.8889267091048727`*^9, 3.888983628576912*^9, 3.8889864875580063`*^9, 
   3.8889893435890975`*^9, 3.8890000502262087`*^9, 3.8890189627480235`*^9, 
   3.889019012884716*^9, 3.8890239799333534`*^9, 3.889069528027402*^9, 
   3.8890727515274754`*^9, 3.889075412340828*^9, 3.889080984696273*^9, 
   3.8890843669719152`*^9, 3.8891124838080463`*^9, 3.889160431963237*^9, 
   3.8891710137207413`*^9, 3.889246312971907*^9, 3.889252329720003*^9, 
   3.8892742201337643`*^9, 3.889279451441628*^9, 3.889293362715578*^9, 
   3.889335752257383*^9, 3.8893490936467276`*^9, 3.8893548554561634`*^9, 
   3.889438700350221*^9, 3.889438801263932*^9, 3.889439052750147*^9, 
   3.889439200080123*^9, 3.8894414293343735`*^9, 3.889501137542803*^9, 
   3.8895929729623384`*^9, 3.8896098296944346`*^9, 3.889626202268361*^9, 
   3.8896280416391892`*^9, 3.889629062543648*^9, 3.88963295292106*^9, 
   3.8896344690773635`*^9, 3.889634991672576*^9, 3.889635641853717*^9, 
   3.889671356175132*^9, 3.8896794145828505`*^9, 3.889697157145068*^9, 
   3.889713842517124*^9, 3.8897166886041765`*^9, 3.8897181747203484`*^9, 
   3.889718460208375*^9, 3.889767592063574*^9, 3.8897677452749195`*^9, 
   3.889773670090494*^9, 3.8897957642295475`*^9, 3.8897959309414387`*^9, 
   3.8897960117840877`*^9, 3.8897999504639397`*^9, {3.8897999804931965`*^9, 
   3.889800049228874*^9}, 3.88980009370046*^9, {3.8898064654816446`*^9, 
   3.889806529917054*^9}, {3.889809081405654*^9, 3.8898091064646516`*^9}, 
   3.8898195659980354`*^9, {3.889819642067735*^9, 3.8898196903388023`*^9}, {
   3.889843505084861*^9, 3.8898435282136717`*^9}, 3.889843584751946*^9, {
   3.889852710969293*^9, 3.8898527654633155`*^9}, 3.889852843931794*^9, {
   3.8898613559302845`*^9, 3.8898614478270454`*^9}, {3.8898671922913284`*^9, 
   3.889867257099184*^9}, 3.889891086847475*^9, 3.8899293631015167`*^9, 
   3.889929394741864*^9, 3.889929429144411*^9, {3.8899356799799557`*^9, 
   3.8899357294675884`*^9}, 3.8899357793820467`*^9, {3.8899415976123333`*^9, 
   3.889941679433074*^9}, {3.8899556514757338`*^9, 3.889955675344881*^9}, {
   3.8899557165784273`*^9, 3.8899558028208904`*^9}, 3.8900186147924614`*^9, {
   3.8900186774525075`*^9, 3.890018728727044*^9}, {3.8900289697222576`*^9, 
   3.890029060733079*^9}, {3.8900392912425385`*^9, 3.8900393648466463`*^9}, 
   3.890041708374031*^9, 3.890042503393766*^9, 3.890042554193991*^9, 
   3.8900426104641576`*^9, 3.890042660264347*^9, 3.890042716487626*^9, 
   3.890045159748083*^9, 3.890045205288885*^9, 3.8900454601061797`*^9, 
   3.890045505672022*^9, 3.890045549507938*^9, 3.8900456051719913`*^9, 
   3.890048170191894*^9, 3.890048204274443*^9, 3.89004823661082*^9, 
   3.890048284720346*^9, {3.8900600270879602`*^9, 3.8900600543469505`*^9}, {
   3.890060085488134*^9, 3.89006013984299*^9}, 3.890061520311358*^9, {
   3.890061554919094*^9, 3.8900615933301277`*^9}, {3.89006163899031*^9, 
   3.890061712875552*^9}, 3.890104180525921*^9, 3.8901042131358314`*^9, 
   3.8901042482153015`*^9, 3.890108566380054*^9, {3.890108604260872*^9, 
   3.8901086958102055`*^9}, {3.8901217774006805`*^9, 3.890121838402644*^9}, 
   3.890127762854725*^9, {3.8901278320663776`*^9, 3.8901278681355877`*^9}, 
   3.890132103188574*^9, 3.890144267428362*^9, 3.890144315358447*^9, 
   3.8901443662087817`*^9, 3.8901443999621196`*^9, 3.8901507961580753`*^9, 
   3.890150830828441*^9, 3.8901939268155193`*^9, 3.8901939625255156`*^9, {
   3.890194007985295*^9, 3.8901940322788796`*^9}, 3.890196923831743*^9, 
   3.890201114717187*^9, 3.890203375790527*^9, 3.890204589110495*^9, 
   3.8902046361089153`*^9, 3.890206650061038*^9, 3.890213860547999*^9, 
   3.8902139858604703`*^9, 3.8902187307324944`*^9, 3.89022060762595*^9, 
   3.890220801380798*^9, 3.8902209772489853`*^9, 3.8902210325765305`*^9, 
   3.8902254941517296`*^9, 3.8902289097608767`*^9, 3.890229878138154*^9, 
   3.890231146151808*^9, 3.890234298577649*^9, 3.8902358669738445`*^9, 
   3.8902382603196945`*^9, {3.890241639706476*^9, 3.8902416844462047`*^9}, {
   3.8902417215863075`*^9, 3.890241760102376*^9}, 3.8902774360930834`*^9, 
   3.890278015333103*^9, 3.890278100046251*^9, {3.890279827365496*^9, 
   3.89027987392507*^9}, 3.8902799862959857`*^9, 3.890280064183726*^9, 
   3.890285500654276*^9, 3.890285994357486*^9, 3.890287228208864*^9, 
   3.8902892923996944`*^9, 3.890289609808283*^9, {3.8903844801389213`*^9, 
   3.890384521960644*^9}, 3.890403494166383*^9, 3.890403549435137*^9, 
   3.890403622043475*^9, 3.890403676160954*^9, 3.8904074847687364`*^9, 
   3.890407544776926*^9, 3.8904110396450706`*^9, 3.890411075848171*^9, 
   3.8904111106113596`*^9, 3.8904113032049713`*^9, 3.8904115439090633`*^9, 
   3.890411726031389*^9, 3.8904117650313244`*^9, 3.8904118081502514`*^9, 
   3.8904118407298594`*^9, 3.890411879122403*^9, 3.8904532767899866`*^9, {
   3.8904533349423113`*^9, 3.8904534215897675`*^9}, 3.8904534921637115`*^9, 
   3.8907172184345856`*^9, 3.890717575257516*^9, 3.8907176538323355`*^9, 
   3.890717716027012*^9, 3.8907177715699463`*^9, 3.890717881080304*^9, 
   3.890717960124734*^9, 3.890725022493332*^9, 3.8907251498911552`*^9, 
   3.890725256284028*^9, 3.89072537854273*^9, 3.8907334313187265`*^9, 
   3.890733524866274*^9, 3.890733557445999*^9, 3.8907335990605774`*^9, 
   3.890733645511091*^9, 3.890733694055978*^9, 3.890733747016071*^9, 
   3.8907977933809357`*^9, {3.890797826375225*^9, 3.8907979083220196`*^9}, {
   3.890819748514407*^9, 3.890819842212592*^9}, {3.8908835164908295`*^9, 
   3.890883618311589*^9}, 3.8909082800876412`*^9, 3.890963258521935*^9, 
   3.8909691259225063`*^9, 3.8913996366044855`*^9, 3.8913996781371374`*^9, {
   3.891400317409751*^9, 3.891400345923274*^9}, 3.891403053061558*^9, 
   3.891403233318286*^9, 3.8914033159086647`*^9, 3.8914033484396505`*^9, 
   3.891427923836864*^9, 3.891436831624782*^9, 3.891436865013768*^9, 
   3.891436914196165*^9, 3.891481974167375*^9, 3.8914820173971615`*^9, 
   3.891482068846781*^9, 3.8914821034026527`*^9, 3.891482140819026*^9, {
   3.891484761276865*^9, 3.8914847909841585`*^9}, 3.891568604808538*^9, 
   3.891568648425314*^9, 3.891568715445574*^9, 3.891576651139839*^9, 
   3.8915767628894243`*^9, 3.8915768100924215`*^9, 3.891582357319253*^9, 
   3.8915824097141843`*^9, 3.8915824941483393`*^9, 3.8915894332102127`*^9, 
   3.8915895503778715`*^9, 3.8915896151198483`*^9, 3.8915897513036423`*^9, 
   3.8916531408652287`*^9, 3.8916531969165688`*^9, 3.8916532285914884`*^9, 
   3.891653293773965*^9, 3.8916533269100676`*^9, 3.891653477581403*^9, 
   3.891653531804982*^9, 3.8916535655749617`*^9, 3.891656268637117*^9, 
   3.891656322726125*^9, 3.8916563806425514`*^9, 3.8916640646528645`*^9, 
   3.894690873773833*^9},
 CellLabel->
  "Out[176]=",ExpressionUUID->"9a02a8db-2572-43a3-ad9a-e45b5734769a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"brenthis_daphne.ES_BD_1141.chromosome_2\"\>", ",", "24443201", 
   ",", "24443412", ",", "\<\"FR_BD_1329,ES_BD_1489,ES_BD_1490\"\>", 
   ",", "\<\"0,0,0\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.8852753110485497`*^9, {3.885276376205946*^9, 3.885276388159782*^9}, 
   3.88535751318001*^9, {3.885533852374689*^9, 3.885533865748112*^9}, 
   3.8855363912226334`*^9, 3.885536593584613*^9, 3.885536789170961*^9, 
   3.8855369509414177`*^9, 3.885537475532503*^9, 3.88554804164942*^9, 
   3.885548398669179*^9, 3.885550050630603*^9, 3.885550763610898*^9, 
   3.8855514826291914`*^9, 3.8855520760195484`*^9, 3.885552526564357*^9, 
   3.8855535082919884`*^9, 3.8855545557536354`*^9, 3.885557049472746*^9, 
   3.8856152196381555`*^9, 3.8856199286421447`*^9, 3.885619981407256*^9, 
   3.8856200415815024`*^9, 3.8856276014641237`*^9, 3.885628027677825*^9, 
   3.885628089982072*^9, 3.885964972277747*^9, 3.885985027225238*^9, 
   3.8870967207738934`*^9, 3.8870967537043915`*^9, 3.8870970783871403`*^9, 
   3.8870995355735717`*^9, 3.8871094671811247`*^9, 3.8875306217075305`*^9, 
   3.887533114742771*^9, 3.8875356854485173`*^9, 3.887536154360077*^9, 
   3.887692736004139*^9, 3.8876930951697435`*^9, 3.887693130829257*^9, 
   3.887693166790639*^9, 3.8876932892767634`*^9, 3.887696199859477*^9, 
   3.8876997607949195`*^9, 3.8877988967715673`*^9, 3.887799738868802*^9, 
   3.8878649797262297`*^9, 3.887880488721858*^9, 3.887881066205755*^9, 
   3.88788603416656*^9, 3.8879536459427404`*^9, 3.8879548322101817`*^9, 
   3.8879605592193766`*^9, 3.88796062197838*^9, 3.8879607739394317`*^9, 
   3.8879788411788826`*^9, 3.8879800837203207`*^9, 3.888143206858*^9, 
   3.888143359238023*^9, 3.8881434120577955`*^9, 3.888145135644201*^9, 
   3.888145168599328*^9, 3.888145207063862*^9, 3.8881452405275745`*^9, 
   3.8881452799914184`*^9, 3.888157554089636*^9, 3.8881576482828627`*^9, 
   3.8887372137710295`*^9, 3.8887408314807234`*^9, 3.8887486009673724`*^9, 
   3.888749225228243*^9, 3.888749289347271*^9, 3.888749422401123*^9, 
   3.888753523569858*^9, 3.8887697353178525`*^9, 3.8888133216022277`*^9, 
   3.8888211502725625`*^9, 3.888824942719178*^9, 3.888830963222637*^9, 
   3.888834206853443*^9, 3.888897855322736*^9, 3.8889040666252527`*^9, 
   3.8889092446111193`*^9, 3.8889180485158367`*^9, 3.888923698427111*^9, 
   3.888923924656926*^9, 3.8889246167443714`*^9, 3.8889257002672086`*^9, 
   3.8889267091048727`*^9, 3.888983628576912*^9, 3.8889864875580063`*^9, 
   3.8889893435890975`*^9, 3.8890000502262087`*^9, 3.8890189627480235`*^9, 
   3.889019012884716*^9, 3.8890239799333534`*^9, 3.889069528027402*^9, 
   3.8890727515274754`*^9, 3.889075412340828*^9, 3.889080984696273*^9, 
   3.8890843669719152`*^9, 3.8891124838080463`*^9, 3.889160431963237*^9, 
   3.8891710137207413`*^9, 3.889246312971907*^9, 3.889252329720003*^9, 
   3.8892742201337643`*^9, 3.889279451441628*^9, 3.889293362715578*^9, 
   3.889335752257383*^9, 3.8893490936467276`*^9, 3.8893548554561634`*^9, 
   3.889438700350221*^9, 3.889438801263932*^9, 3.889439052750147*^9, 
   3.889439200080123*^9, 3.8894414293343735`*^9, 3.889501137542803*^9, 
   3.8895929729623384`*^9, 3.8896098296944346`*^9, 3.889626202268361*^9, 
   3.8896280416391892`*^9, 3.889629062543648*^9, 3.88963295292106*^9, 
   3.8896344690773635`*^9, 3.889634991672576*^9, 3.889635641853717*^9, 
   3.889671356175132*^9, 3.8896794145828505`*^9, 3.889697157145068*^9, 
   3.889713842517124*^9, 3.8897166886041765`*^9, 3.8897181747203484`*^9, 
   3.889718460208375*^9, 3.889767592063574*^9, 3.8897677452749195`*^9, 
   3.889773670090494*^9, 3.8897957642295475`*^9, 3.8897959309414387`*^9, 
   3.8897960117840877`*^9, 3.8897999504639397`*^9, {3.8897999804931965`*^9, 
   3.889800049228874*^9}, 3.88980009370046*^9, {3.8898064654816446`*^9, 
   3.889806529917054*^9}, {3.889809081405654*^9, 3.8898091064646516`*^9}, 
   3.8898195659980354`*^9, {3.889819642067735*^9, 3.8898196903388023`*^9}, {
   3.889843505084861*^9, 3.8898435282136717`*^9}, 3.889843584751946*^9, {
   3.889852710969293*^9, 3.8898527654633155`*^9}, 3.889852843931794*^9, {
   3.8898613559302845`*^9, 3.8898614478270454`*^9}, {3.8898671922913284`*^9, 
   3.889867257099184*^9}, 3.889891086847475*^9, 3.8899293631015167`*^9, 
   3.889929394741864*^9, 3.889929429144411*^9, {3.8899356799799557`*^9, 
   3.8899357294675884`*^9}, 3.8899357793820467`*^9, {3.8899415976123333`*^9, 
   3.889941679433074*^9}, {3.8899556514757338`*^9, 3.889955675344881*^9}, {
   3.8899557165784273`*^9, 3.8899558028208904`*^9}, 3.8900186147924614`*^9, {
   3.8900186774525075`*^9, 3.890018728727044*^9}, {3.8900289697222576`*^9, 
   3.890029060733079*^9}, {3.8900392912425385`*^9, 3.8900393648466463`*^9}, 
   3.890041708374031*^9, 3.890042503393766*^9, 3.890042554193991*^9, 
   3.8900426104641576`*^9, 3.890042660264347*^9, 3.890042716487626*^9, 
   3.890045159748083*^9, 3.890045205288885*^9, 3.8900454601061797`*^9, 
   3.890045505672022*^9, 3.890045549507938*^9, 3.8900456051719913`*^9, 
   3.890048170191894*^9, 3.890048204274443*^9, 3.89004823661082*^9, 
   3.890048284720346*^9, {3.8900600270879602`*^9, 3.8900600543469505`*^9}, {
   3.890060085488134*^9, 3.89006013984299*^9}, 3.890061520311358*^9, {
   3.890061554919094*^9, 3.8900615933301277`*^9}, {3.89006163899031*^9, 
   3.890061712875552*^9}, 3.890104180525921*^9, 3.8901042131358314`*^9, 
   3.8901042482153015`*^9, 3.890108566380054*^9, {3.890108604260872*^9, 
   3.8901086958102055`*^9}, {3.8901217774006805`*^9, 3.890121838402644*^9}, 
   3.890127762854725*^9, {3.8901278320663776`*^9, 3.8901278681355877`*^9}, 
   3.890132103188574*^9, 3.890144267428362*^9, 3.890144315358447*^9, 
   3.8901443662087817`*^9, 3.8901443999621196`*^9, 3.8901507961580753`*^9, 
   3.890150830828441*^9, 3.8901939268155193`*^9, 3.8901939625255156`*^9, {
   3.890194007985295*^9, 3.8901940322788796`*^9}, 3.890196923831743*^9, 
   3.890201114717187*^9, 3.890203375790527*^9, 3.890204589110495*^9, 
   3.8902046361089153`*^9, 3.890206650061038*^9, 3.890213860547999*^9, 
   3.8902139858604703`*^9, 3.8902187307324944`*^9, 3.89022060762595*^9, 
   3.890220801380798*^9, 3.8902209772489853`*^9, 3.8902210325765305`*^9, 
   3.8902254941517296`*^9, 3.8902289097608767`*^9, 3.890229878138154*^9, 
   3.890231146151808*^9, 3.890234298577649*^9, 3.8902358669738445`*^9, 
   3.8902382603196945`*^9, {3.890241639706476*^9, 3.8902416844462047`*^9}, {
   3.8902417215863075`*^9, 3.890241760102376*^9}, 3.8902774360930834`*^9, 
   3.890278015333103*^9, 3.890278100046251*^9, {3.890279827365496*^9, 
   3.89027987392507*^9}, 3.8902799862959857`*^9, 3.890280064183726*^9, 
   3.890285500654276*^9, 3.890285994357486*^9, 3.890287228208864*^9, 
   3.8902892923996944`*^9, 3.890289609808283*^9, {3.8903844801389213`*^9, 
   3.890384521960644*^9}, 3.890403494166383*^9, 3.890403549435137*^9, 
   3.890403622043475*^9, 3.890403676160954*^9, 3.8904074847687364`*^9, 
   3.890407544776926*^9, 3.8904110396450706`*^9, 3.890411075848171*^9, 
   3.8904111106113596`*^9, 3.8904113032049713`*^9, 3.8904115439090633`*^9, 
   3.890411726031389*^9, 3.8904117650313244`*^9, 3.8904118081502514`*^9, 
   3.8904118407298594`*^9, 3.890411879122403*^9, 3.8904532767899866`*^9, {
   3.8904533349423113`*^9, 3.8904534215897675`*^9}, 3.8904534921637115`*^9, 
   3.8907172184345856`*^9, 3.890717575257516*^9, 3.8907176538323355`*^9, 
   3.890717716027012*^9, 3.8907177715699463`*^9, 3.890717881080304*^9, 
   3.890717960124734*^9, 3.890725022493332*^9, 3.8907251498911552`*^9, 
   3.890725256284028*^9, 3.89072537854273*^9, 3.8907334313187265`*^9, 
   3.890733524866274*^9, 3.890733557445999*^9, 3.8907335990605774`*^9, 
   3.890733645511091*^9, 3.890733694055978*^9, 3.890733747016071*^9, 
   3.8907977933809357`*^9, {3.890797826375225*^9, 3.8907979083220196`*^9}, {
   3.890819748514407*^9, 3.890819842212592*^9}, {3.8908835164908295`*^9, 
   3.890883618311589*^9}, 3.8909082800876412`*^9, 3.890963258521935*^9, 
   3.8909691259225063`*^9, 3.8913996366044855`*^9, 3.8913996781371374`*^9, {
   3.891400317409751*^9, 3.891400345923274*^9}, 3.891403053061558*^9, 
   3.891403233318286*^9, 3.8914033159086647`*^9, 3.8914033484396505`*^9, 
   3.891427923836864*^9, 3.891436831624782*^9, 3.891436865013768*^9, 
   3.891436914196165*^9, 3.891481974167375*^9, 3.8914820173971615`*^9, 
   3.891482068846781*^9, 3.8914821034026527`*^9, 3.891482140819026*^9, {
   3.891484761276865*^9, 3.8914847909841585`*^9}, 3.891568604808538*^9, 
   3.891568648425314*^9, 3.891568715445574*^9, 3.891576651139839*^9, 
   3.8915767628894243`*^9, 3.8915768100924215`*^9, 3.891582357319253*^9, 
   3.8915824097141843`*^9, 3.8915824941483393`*^9, 3.8915894332102127`*^9, 
   3.8915895503778715`*^9, 3.8915896151198483`*^9, 3.8915897513036423`*^9, 
   3.8916531408652287`*^9, 3.8916531969165688`*^9, 3.8916532285914884`*^9, 
   3.891653293773965*^9, 3.8916533269100676`*^9, 3.891653477581403*^9, 
   3.891653531804982*^9, 3.8916535655749617`*^9, 3.891656268637117*^9, 
   3.891656322726125*^9, 3.8916563806425514`*^9, 3.8916640646528645`*^9, 
   3.894690873776842*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"5fe9ee51-1241-4b97-962e-f7160765c7bc"]
}, Open  ]],

Cell["\<\
We need to connect our blockwise data to the probability arrays above. To do \
this we set the dimensions of the array while remembering that Mathematica is \
1-based.\
\>", "Text",
 CellChangeTimes->{{3.887096778346083*^9, 3.8870967928658257`*^9}, {
  3.894691753911105*^9, 
  3.894691783742347*^9}},ExpressionUUID->"fa3c3aea-0136-4d39-87b9-\
d498d27f9593"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dim", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"kmax", "+", "2"}], ",", 
     RowBox[{"kmax", "+", "2"}], ",", " ", 
     RowBox[{"kmax", " ", "+", " ", "2"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.885533871660142*^9, 3.8855338734771533`*^9}, {
  3.887093196052327*^9, 3.88709320145076*^9}, {3.8870968430934362`*^9, 
  3.8870968471870112`*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"c6971dbb-71f1-4a05-aa41-0015589c1030"],

Cell["\<\
Next we make each config a list of configs so that we can create a set of \
associations from it more easily.
Here, the data is formatted so that each block has a unique entry, and the \
sparse array has a single non-zero entry of \[OpenCurlyQuote]1\
\[CloseCurlyQuote] corresponding to the mutation configuration present.\
\>", "Text",
 CellChangeTimes->{{3.88527571839176*^9, 3.8852757318799458`*^9}, {
   3.885361201936831*^9, 3.885361399610166*^9}, {3.887096830779422*^9, 
   3.8870968327650843`*^9}, 3.8871039125874805`*^9, {3.8946917972819266`*^9, 
   3.894691799144805*^9}},ExpressionUUID->"9418f7aa-cd78-4aa8-8f39-\
62ea6b51e9c4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"configs", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"StringSplit", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], ",", "\"\<,\>\""}], "]"}], "&"}], 
     "/@", "xs"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"split", " ", "the", " ", "string", " ", 
     RowBox[{"by", " ", "'"}]}], ",", "'"}], "*)"}]}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"configs", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ToExpression", "[", "#", "]"}], "&"}], "/@", "configs"}]}], 
   ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "turn", " ", "that", " ", "into", " ", "a", " ", "list", " ", "of", " ", 
    "indices"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"configs", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "+", "1"}], "&"}], "/@", "configs"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "add", " ", "one", " ", "to", " ", "the", " ", "indices", " ", "for", " ", 
    "mathematica", " ", "indexing"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"configSparseArrayRules", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", "\[Rule]", "1"}], "}"}], "&"}], "/@", "configs"}]}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "rules", " ", "to", " ", "make", " ", "a", " ", "sparse", " ", "array", 
    " ", "for", " ", "each", " ", "entry", " ", "in", " ", "the", " ", 
    "data"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"configSparseArrays", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"SparseArray", "[", 
       RowBox[{"#", ",", "dim"}], "]"}], "&"}], "/@", 
     "configSparseArrayRules"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"making", " ", "the", " ", "sparse", " ", "array"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"each", " ", "entry", " ", "of", " ", "configSparseArrays", " ", 
     RowBox[{"(", 
      RowBox[{
      "which", " ", "is", " ", "itself", " ", "just", " ", "a", " ", "list"}],
       ")"}], " ", "is", " ", "the", " ", "sparse", " ", "array", " ", "with",
      " ", "a", " ", "single", " ", "non"}], "-", 
    RowBox[{
    "zero", " ", "element", " ", "corresponding", " ", "to", " ", "the", " ", 
     "one", " ", "block", " ", "type", " ", "observed", " ", "at", " ", 
     "this", " ", "block"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bSFS", " ", "=", " ", 
    RowBox[{"Total", "[", "configSparseArrays", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "It", " ", "can", " ", "be", " ", "helpful", " ", "to", " ", "have", " ", 
    "the", " ", "full", " ", "bSFS"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "@", "bSFS"}]}], "Input",
 CellChangeTimes->{{3.885275134240732*^9, 3.885275139374277*^9}, {
   3.885275246639134*^9, 3.885275277837682*^9}, {3.8852753265693903`*^9, 
   3.8852753362668047`*^9}, {3.885275700911457*^9, 3.885275714266591*^9}, 
   3.885275921072919*^9, {3.885275966682102*^9, 3.885275977812365*^9}, {
   3.885276009783415*^9, 3.88527604309304*^9}, {3.8852762015446463`*^9, 
   3.88527634656991*^9}, {3.885276428400433*^9, 3.885276562437909*^9}, {
   3.885277754202936*^9, 3.885277754629416*^9}, {3.885281304761094*^9, 
   3.885281307555601*^9}, {3.885281436270504*^9, 3.885281459609099*^9}, {
   3.8853727172052603`*^9, 3.885372761860681*^9}, {3.8855338893554187`*^9, 
   3.8855339148868623`*^9}, 3.8870968567893705`*^9, 3.8870973731190805`*^9, {
   3.8902848923867693`*^9, 3.89028490139765*^9}, {3.890284945355374*^9, 
   3.8902849800313916`*^9}, {3.8902858414981036`*^9, 3.890285857694852*^9}, {
   3.8902859442550783`*^9, 3.8902859470229917`*^9}, {3.890285977795843*^9, 
   3.890285988466926*^9}, {3.8946905832074275`*^9, 3.894690601645338*^9}, 
   3.8946918372006607`*^9},ExpressionUUID->"f096f50e-bbcf-4249-8fdb-\
a8f20469cfe2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"5976"},
          {"457"},
          {"111"},
          {"175"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1092"},
          {"77"},
          {"28"},
          {"23"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"376"},
          {"34"},
          {"8"},
          {"14"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"565"},
          {"49"},
          {"9"},
          {"5"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1850"},
          {"145"},
          {"18"},
          {"41"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"307"},
          {"39"},
          {"18"},
          {"23"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"104"},
          {"14"},
          {"3"},
          {"9"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"102"},
          {"28"},
          {"11"},
          {"3"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"707"},
          {"39"},
          {"7"},
          {"14"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"123"},
          {"16"},
          {"4"},
          {"7"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"40"},
          {"6"},
          {"5"},
          {"5"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"53"},
          {"5"},
          {"3"},
          {"3"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"639"},
          {"53"},
          {"6"},
          {"8"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"134"},
          {"10"},
          {"4"},
          {"10"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"35"},
          {"4"},
          {"9"},
          {"7"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"44"},
          {"4"},
          {"6"},
          {"8"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {4, 4, 4}, 0, {
     1, {{0, 16, 32, 48, 64}, {{1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 
       2}, {2, 3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4,
        3}, {4, 4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {
       2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 
       4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3,
        1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {1, 1}, {
       1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3, 1}, {3, 
       2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}}}, {5976, 457, 111, 
      175, 1092, 77, 28, 23, 376, 34, 8, 14, 565, 49, 9, 5, 1850, 145, 18, 41,
       307, 39, 18, 23, 104, 14, 3, 9, 102, 28, 11, 3, 707, 39, 7, 14, 123, 
      16, 4, 7, 40, 6, 5, 5, 53, 5, 3, 3, 639, 53, 6, 8, 134, 10, 4, 10, 35, 
      4, 9, 7, 44, 4, 6, 8}}]]]]], "Output",
 CellChangeTimes->{
  3.890285950082549*^9, 3.890286021211321*^9, 3.890287311554161*^9, 
   3.8902893156463785`*^9, 3.8902897042464223`*^9, 3.890384489527651*^9, 
   3.8903845289903507`*^9, 3.890403509369485*^9, 3.890403718628414*^9, 
   3.8904075955710745`*^9, 3.8904111415121994`*^9, 3.890411328790086*^9, 
   3.890411564091984*^9, 3.890411929462363*^9, 3.89045328195051*^9, 
   3.89045334265909*^9, 3.8904534276123953`*^9, 3.8904534968907695`*^9, 
   3.890717237075364*^9, 3.8907176071954975`*^9, 3.8907180581404257`*^9, 
   3.8907254541648073`*^9, 3.890733806750144*^9, 3.8907977993373485`*^9, 
   3.8907978320960217`*^9, {3.890797886025525*^9, 3.8907979155861473`*^9}, 
   3.890819849561902*^9, 3.8908835235238333`*^9, 3.8908836236276035`*^9, 
   3.8909082815275307`*^9, 3.890963259812563*^9, 3.89096912712496*^9, 
   3.8913996495426216`*^9, 3.8913997000386753`*^9, 3.891400376446422*^9, 
   3.8914033715916853`*^9, 3.8914279762794423`*^9, 3.89143697049747*^9, 
   3.891482030451912*^9, 3.8914821932192574`*^9, 3.8914849053374166`*^9, 
   3.8915686238652925`*^9, 3.8915688037157173`*^9, 3.8915768971347365`*^9, 
   3.891582558753977*^9, 3.8915898037070026`*^9, 3.8916531594387674`*^9, 
   3.891653658335221*^9, 3.891656488551853*^9, 3.8916640701006303`*^9, 
   3.894690874264432*^9},
 CellLabel->
  "Out[185]//MatrixForm=",ExpressionUUID->"8eb2167d-8a87-4983-af8e-\
9b4079626d63"]
}, Open  ]],

Cell["\<\
The array printed above is the bSFS across the entire dataset. We can \
calculate neutral likelihoods for the bSFS in this form, but for sweeps we \
need to know the distance of a given block from the sweep centre. To do this \
we take the midpoint of the blocks.\
\>", "Text",
 CellChangeTimes->{{3.885276575380406*^9, 3.8852765773048277`*^9}, {
  3.885283480605915*^9, 3.8852834811429863`*^9}, {3.8870969047976217`*^9, 
  3.8870969059668865`*^9}, {3.8946918437702274`*^9, 
  3.894691920776016*^9}},ExpressionUUID->"638584cb-c9c3-4840-b32b-\
47b2c03264da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"midpoints", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
        "+", 
        RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        ")"}], "/", "2.0"}], " ", "&"}], "/@", "xs"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.885358295916553*^9, {3.8870969003173223`*^9, 3.887096902469802*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"50fe862b-d625-43ca-bb69-d6d7d578d0ea"],

Cell["\<\
Now we need a function that returns the log-likelihood of the data for a \
block \[OpenCurlyQuote]dataArr\[CloseCurlyQuote] (a sparse array) using the \
numProbTable and \[Alpha]d, theta, and Ta values.  Importantly, we need to \
record the log-likelihood for each block in the dataset and sum them.\
\>", "Text",
 CellChangeTimes->{{3.8852886880472918`*^9, 3.885288703793499*^9}, {
   3.885368752904908*^9, 3.885368821439835*^9}, {3.885372841216457*^9, 
   3.885373229677786*^9}, {3.8853733093507338`*^9, 3.885373332302002*^9}, {
   3.8853767430175753`*^9, 3.8853767432672243`*^9}, {3.8855340169286346`*^9, 
   3.8855340193267136`*^9}, 3.8870969181355295`*^9, {3.8871039431060486`*^9, 
   3.887103957648678*^9}, {3.8871099224687767`*^9, 3.887109924944396*^9}, {
   3.894690616594742*^9, 3.8946906376499386`*^9}, {3.894691933038089*^9, 
   3.8946919382763066`*^9}, {3.894692025425557*^9, 
   3.8946920847457666`*^9}},ExpressionUUID->"87f62d7b-5dbe-491d-9e29-\
7827eb44517e"],

Cell["\<\
There are a bunch of functions below that we use to calculate neutral and \
sweep likelihoods (which we won\[CloseCurlyQuote]t describe in detail here). \
There are two potential problems with the approach of reading in many blocks \
and calculating likelihoods. The first is that we want to limit our analysis \
to certain regions of the genome. Therefore, the functions below only \
consider blocks within 500 kb of the sweep centre. The second is that our \
grid only includes alpha up to 12, so we can\[CloseCurlyQuote]t calculate \
likelihoods for blocks far away from the sweep. However, these blocks will be \
essentially unaffected by the sweep, so we use neutral probabilities for \
these.\
\>", "Text",
 CellChangeTimes->{{3.885368826843341*^9, 3.885368887050489*^9}, {
   3.8853707104022713`*^9, 3.885370732790065*^9}, {3.885372125739435*^9, 
   3.8853722063578653`*^9}, {3.885373338623152*^9, 3.8853735387388353`*^9}, {
   3.887096941965228*^9, 3.8870969461556234`*^9}, {3.887104049377756*^9, 
   3.8871040778310127`*^9}, {3.8887392712801027`*^9, 3.888739276877595*^9}, 
   3.894690657941463*^9, {3.894692100687319*^9, 
   3.8946923554159737`*^9}},ExpressionUUID->"cc6d6d13-a616-47a3-8239-\
d7612d317439"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CalcLogLikeWin", "[", 
     RowBox[{
     "datArr_", ",", "numProbTab_", ",", "\[Theta]_", ",", "\[Alpha]d_", ",", 
      "Ta_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Total", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        "*", 
        RowBox[{"Log", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Extract", "[", 
            RowBox[{"numProbTab", ",", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "]"}], "[", 
           RowBox[{"\[Theta]", ",", "\[Alpha]d", ",", "Ta"}], "]"}], ")"}], 
         "]"}]}], "&"}], "/@", 
      RowBox[{
       RowBox[{"ArrayRules", "[", "datArr", "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"1", ";;", 
        RowBox[{"-", "2"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CalcLogLikeTotal", "[", 
    RowBox[{
    "configSparseArrays_", ",", "positions_", ",", "numProbTab_", ",", 
     "\[Theta]Val_", ",", "\[Alpha]Val_", ",", "TaVal_", ",", "sweepCenter_", 
     ",", "numProbTableNeutral_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "blockLikelihoodList", ",", "alphaDistances", ",", " ", "baseDistances",
        ",", " ", "neutralWinLikelihoodsTheta", ",", " ", 
       "numProbTableNeutralTheta", ",", " ", "\[Alpha]ValNew", ",", " ", 
       "tempDistances"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Alpha]ValNew", "=", " ", 
       RowBox[{"1.0", "*", 
        RowBox[{"10", "^", "\[Alpha]Val"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"baseDistances", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"positions", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"sweepCenter", "*", "1000000"}], ")"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tempDistances", " ", "=", " ", 
       RowBox[{"baseDistances", "/.", 
        RowBox[{"{", 
         RowBox[{"0.0", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "5"}]}]}], "}"}]}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "ensures", " ", "that", " ", "block", " ", "midpoint", " ", "is", " ",
          "never", " ", "truly", " ", "AT", " ", "the", " ", "sweep", " ", 
         "center"}], ",", " ", 
        RowBox[{"or", " ", "get", " ", "numeric", " ", "issues"}]}], "*)"}], 
      " ", "\[IndentingNewLine]", 
      RowBox[{"alphaDistances", " ", "=", " ", 
       RowBox[{"tempDistances", "*", "\[Alpha]ValNew"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "distances", " ", "is", " ", "now", " ", "relative", " ", "distance", 
        " ", "to", " ", "sweep", " ", 
        RowBox[{"centre", ".", " ", "We"}], " ", "precalculated", " ", "for", 
        " ", "\[Alpha]", " ", "between", " ", "0", " ", "and", " ", "10"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"if", " ", "\[Alpha]d"}], ">", "10"}], ",", " ", 
        RowBox[{
         RowBox[{"return", " ", "the", " ", "pre"}], "-", 
         RowBox[{
         "computed", " ", "neutral", " ", "log", " ", "likelihood", " ", "of",
           " ", "this", " ", "window"}]}], ",", " ", "else", ",", " ", 
        RowBox[{"calculate", " ", "sweep", " ", 
         RowBox[{"likelihood", ":"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"if", " ", "d"}], ">", "250000"}], ",", " ", 
        RowBox[{
         RowBox[{"return", " ", "a", " ", "lnCL", " ", "of", " ", "0"}], 
         ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"numProbTableNeutralTheta", " ", "=", " ", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "[",
              "\[Theta]Val", "]"}]}], "&"}], "/@", 
          RowBox[{"ArrayRules", "[", "numProbTableNeutral", "]"}]}], ",", 
         RowBox[{"Dimensions", "[", "numProbTableNeutral", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"neutralWinLikelihoodsTheta", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"CalcNeutralLogLikeWin", "[", 
          RowBox[{"#", ",", " ", "numProbTableNeutralTheta"}], "]"}], "&"}], "/@",
         "configSparseArrays"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"blockLikelihoodList", " ", "=", " ", 
       RowBox[{"MapThread", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#2", ">", " ", "500000"}], ",", "0", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#3", ">", "10"}], ",", "#4", ",", 
              RowBox[{"CalcLogLikeWin", "[", 
               RowBox[{
               "#1", ",", "numProbTab", ",", "\[Theta]Val", ",", "#3", ",", 
                "TaVal"}], "]"}]}], "]"}]}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "configSparseArrays", ",", "baseDistances", ",", " ", 
           "alphaDistances", ",", "neutralWinLikelihoodsTheta"}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockLikelihoodList"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CalcNeutralLogLikeWin", "[", 
     RowBox[{"datArr_", ",", "numProbTabNeutral_"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Total", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        "*", 
        RowBox[{"Log", "[", 
         RowBox[{"Extract", "[", 
          RowBox[{"numProbTabNeutral", ",", 
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "]"}], "]"}]}], "&"}], "/@", 
      RowBox[{
       RowBox[{"ArrayRules", "[", "datArr", "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"1", ";;", 
        RowBox[{"-", "2"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CalcNeutralLogLikeTotal", "[", 
    RowBox[{"configSparseArrays_", ",", "numProbTab_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "blockLikelihoodList", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"blockLikelihoodList", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CalcNeutralLogLikeWin", "[", 
           RowBox[{"#1", ",", "numProbTab"}], "]"}], "&"}], ",", 
         RowBox[{"{", "configSparseArrays", "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockLikelihoodList"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CalcLikeThetaNeutral", "[", 
   RowBox[{"configSparseArrays_", ",", "probTable_", ",", "theta_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"numProbTableNeutralLocal", " ", "=", " ", 
      RowBox[{"SparseArray", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", "\[Rule]", "theta"}], "}"}]}], "&"}], "/@", 
         RowBox[{"ArrayRules", "[", "probTable", "]"}]}], ",", 
        RowBox[{"Dimensions", "[", "probTable", "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CalcNeutralLogLikeTotal", "[", 
     RowBox[{"configSparseArrays", ",", "numProbTableNeutralLocal"}], "]"}]}],
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.885370578421129*^9, 3.885370696469843*^9}, {
   3.885370771334614*^9, 3.885370778014956*^9}, {3.885373562613708*^9, 
   3.885373566323331*^9}, {3.885375620637451*^9, 3.885375625292931*^9}, {
   3.885445844416183*^9, 3.885445847021516*^9}, {3.8855341123934526`*^9, 
   3.8855341134718857`*^9}, {3.8855343623562036`*^9, 3.885534370656351*^9}, {
   3.8855344796629486`*^9, 3.8855345281761045`*^9}, {3.8879789576053305`*^9, 
   3.8879789720193186`*^9}, {3.887979190690322*^9, 3.8879792154416037`*^9}, {
   3.888737494283665*^9, 3.8887375312271833`*^9}, {3.8887385421110973`*^9, 
   3.88873854294033*^9}, {3.8887386517926273`*^9, 3.888738652750949*^9}, {
   3.8887386880734215`*^9, 3.888738724367561*^9}, {3.8887387565775504`*^9, 
   3.888738829361353*^9}, {3.8887389043830605`*^9, 3.8887389467350874`*^9}, {
   3.8887390529280424`*^9, 3.888739057242898*^9}, {3.888739244673094*^9, 
   3.888739250547291*^9}, {3.888739290739663*^9, 3.88873929502944*^9}, {
   3.888739430448697*^9, 3.8887394311679354`*^9}, {3.8887396729340677`*^9, 
   3.888739730273288*^9}, {3.8889836716012497`*^9, 3.888983681893132*^9}, 
   3.8894372753033123`*^9, {3.8894373605625916`*^9, 3.88943739255929*^9}, {
   3.889437468182439*^9, 3.8894375403369865`*^9}, {3.889437800268194*^9, 
   3.8894378166912003`*^9}, {3.8894378835625067`*^9, 3.889437911456976*^9}, {
   3.8894379586983423`*^9, 3.889438056641383*^9}, {3.889438148708228*^9, 
   3.889438168202257*^9}, {3.889438200042927*^9, 3.8894382014119925`*^9}, {
   3.889438245417279*^9, 3.889438353414115*^9}, {3.889441103213822*^9, 
   3.8894411032692003`*^9}, {3.889631755777585*^9, 3.889631766770713*^9}, {
   3.889632076499437*^9, 3.8896320769485855`*^9}, {3.8896321163406935`*^9, 
   3.889632116827077*^9}, {3.8896323769041777`*^9, 3.889632388400345*^9}, {
   3.88963248584484*^9, 3.889632486081629*^9}, {3.8896326700749493`*^9, 
   3.8896326838525977`*^9}, {3.889632903743846*^9, 3.889632934532671*^9}, {
   3.889633111057123*^9, 3.889633117619237*^9}, {3.889633178791707*^9, 
   3.889633179407648*^9}, {3.8896346232435603`*^9, 3.8896346436363077`*^9}, {
   3.8896346758823223`*^9, 3.8896346942618685`*^9}, {3.889634776785396*^9, 
   3.8896348063295264`*^9}, {3.889671134263319*^9, 3.889671185180989*^9}, {
   3.8897712405785513`*^9, 3.88977124363374*^9}, {3.889773378099669*^9, 
   3.8897733814419174`*^9}, {3.889776579282295*^9, 3.889776579569357*^9}, {
   3.889776668329644*^9, 3.889776692045158*^9}, {3.889777285919483*^9, 
   3.889777320810483*^9}, {3.8897774019243207`*^9, 3.889777451504135*^9}, {
   3.8897777122458467`*^9, 3.8897777251080647`*^9}, {3.889777755874835*^9, 
   3.889777760145843*^9}, {3.889777811476678*^9, 3.8897778736822033`*^9}, {
   3.8897779289337335`*^9, 3.8897779309826894`*^9}, {3.889778146835106*^9, 
   3.8897781551988716`*^9}, {3.889778326766366*^9, 3.8897783399670935`*^9}, {
   3.889778518966095*^9, 3.8897785397532063`*^9}, {3.8897786641571107`*^9, 
   3.88977866612603*^9}, {3.8897824902144585`*^9, 3.889782491347929*^9}, {
   3.889782814208892*^9, 3.8897828308956766`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"63413807-edeb-4a4b-99f1-1e5694b97475"],

Cell["\<\
Using the above functions we can start fitting models. First we fit a neutral \
model (assuming theta = 0.75).\
\>", "Text",
 CellChangeTimes->{{3.885376424193919*^9, 3.885376437622692*^9}, {
   3.885378085635253*^9, 3.88537811114993*^9}, {3.8855356272030964`*^9, 
   3.88553563970457*^9}, 3.8870972069406867`*^9, {3.887109274223318*^9, 
   3.8871092885038567`*^9}, {3.887110062849636*^9, 3.887110084162531*^9}, {
   3.887979822404867*^9, 3.8879798494301243`*^9}, {3.894692360515809*^9, 
   3.8946923860803394`*^9}},ExpressionUUID->"0bda5d5f-c5f6-4303-a7da-\
a3e23bdaad14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcNeutralLogLikeTotal", "[", 
  RowBox[{"configSparseArrays", ",", "numProbTableFoldedNeutral"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8855354916496425`*^9, 3.8855354919426355`*^9}, {
  3.8855358543687677`*^9, 3.8855358546702566`*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"6f068161-8949-4946-97f5-fdfcea9018db"],

Cell[BoxData[
 RowBox[{"-", "32766.061934499598`"}]], "Output",
 CellChangeTimes->{{3.8870983160167837`*^9, 3.8870984077381015`*^9}, {
   3.8870985919850216`*^9, 3.8870985979743056`*^9}, {3.8870986761092873`*^9, 
   3.887098698014203*^9}, {3.8870987315468564`*^9, 3.8870987499196916`*^9}, {
   3.8870987806656847`*^9, 3.887098846536597*^9}, 3.8870989214876394`*^9, 
   3.887099555329177*^9, 3.887109467947437*^9, 3.8875306220229626`*^9, 
   3.887533115213358*^9, 3.8875356859019704`*^9, 3.8875361547519045`*^9, 
   3.8876927365089836`*^9, 3.8876930963346195`*^9, 3.88769313193367*^9, 
   3.8876931678489485`*^9, 3.887693289876254*^9, 3.8876962003642163`*^9, 
   3.887699761285447*^9, 3.887798898472044*^9, 3.8877997406790905`*^9, 
   3.8878649813804255`*^9, 3.8878804902117853`*^9, 3.8878810662998657`*^9, 
   3.887886034634686*^9, 3.8879536461946325`*^9, 3.8879548337772083`*^9, 
   3.8879605608294697`*^9, 3.887960623944098*^9, 3.8879607756587763`*^9, 
   3.887978886142455*^9, 3.887980084846095*^9, 3.888143207238442*^9, 
   3.888143359512459*^9, 3.8881434123783937`*^9, 3.8881451370965376`*^9, 
   3.8881451697332335`*^9, 3.8881452074790783`*^9, 3.8881452410821905`*^9, 
   3.888145280935165*^9, 3.888157555906715*^9, 3.888157649868232*^9, 
   3.8887372421064973`*^9, 3.8887408319003057`*^9, 3.8887486011743155`*^9, 
   3.8887492254542093`*^9, 3.8887492896027184`*^9, 3.8887494226982627`*^9, 
   3.888753523877917*^9, 3.8887697357283764`*^9, 3.88881332189953*^9, 
   3.888821150692314*^9, 3.8888249429791765`*^9, 3.8888309635990953`*^9, 
   3.888834207484937*^9, 3.888897855852561*^9, 3.888904066989812*^9, 
   3.88890924492562*^9, 3.888918048971254*^9, 3.8889236986513786`*^9, 
   3.888923924739376*^9, 3.8889246168528457`*^9, 3.8889257003948326`*^9, 
   3.88892670929368*^9, 3.888983628860242*^9, 3.8889864876766844`*^9, 
   3.8889893436823454`*^9, 3.8890000503925133`*^9, 3.8890189635748243`*^9, 
   3.889019013084725*^9, 3.8890239802313533`*^9, 3.8890695283236732`*^9, 
   3.889072751853113*^9, 3.889075412578904*^9, 3.8890809849933987`*^9, 
   3.8890843679822855`*^9, 3.889112484842678*^9, 3.889160432707572*^9, 
   3.889171014544204*^9, 3.8892463137231073`*^9, 3.8892523305549345`*^9, 
   3.8892742216785164`*^9, 3.889279452390974*^9, 3.8892933636594734`*^9, 
   3.8893357530656195`*^9, 3.889349094078595*^9, 3.8893548561012597`*^9, 
   3.8894387134740267`*^9, 3.8894388143549714`*^9, 3.8894390667526264`*^9, 
   3.889439213972188*^9, 3.8894414448870144`*^9, 3.889501152821409*^9, 
   3.8895929883944654`*^9, 3.8896098685050325`*^9, 3.8896262501166325`*^9, 
   3.889628106768968*^9, 3.8896291071711035`*^9, 3.8896330145192127`*^9, 
   3.889634511969881*^9, 3.88963503138057*^9, 3.8896356540777473`*^9, 
   3.889671385527665*^9, 3.8896794645660887`*^9, 3.889697190557411*^9, 
   3.889713883398844*^9, 3.8897166896453953`*^9, 3.8897181749275804`*^9, 
   3.8897184983518696`*^9, 3.8897676776372447`*^9, 3.889767784583709*^9, 
   3.8897737214055414`*^9, 3.8897957739484205`*^9, 3.889795949279525*^9, 
   3.8897960260631013`*^9, 3.8898001098054533`*^9, 3.889806542986998*^9, 
   3.8898195784096937`*^9, 3.88981970552289*^9, 3.8898435957055655`*^9, 
   3.889852722068283*^9, 3.889852859255871*^9, 3.8898614582929616`*^9, 
   3.8898672686265936`*^9, 3.88989110739283*^9, 3.8899294550964103`*^9, 
   3.8899357889878902`*^9, 3.8899416926796865`*^9, 3.889955810954664*^9, 
   3.8900187381130104`*^9, 3.890029068447562*^9, 3.890039298296544*^9, 
   3.8900393726083736`*^9, 3.890041728274207*^9, 3.8900427415705767`*^9, 
   3.8900456438703747`*^9, 3.890048310912058*^9, 3.89006016659685*^9, {
   3.890061667915392*^9, 3.890061691795176*^9}, 3.8900617372638006`*^9, 
   3.8901041878719025`*^9, 3.8901042579671535`*^9, 3.8901087047626677`*^9, 
   3.8901218466758523`*^9, 3.890127876874363*^9, 3.890132104537735*^9, 
   3.8901444240902863`*^9, 3.8901508049346123`*^9, 3.890150834983817*^9, 
   3.890193932290897*^9, 3.890194036686159*^9, 3.890196925777932*^9, 
   3.890201116138074*^9, 3.8902033762469683`*^9, 3.890204589641707*^9, 
   3.8902046376181197`*^9, 3.8902066505163603`*^9, 3.890213863203628*^9, 
   3.8902139874535933`*^9, 3.8902187320890846`*^9, 3.8902206089728317`*^9, 
   3.8902208025213847`*^9, 3.890220978311285*^9, 3.890221033656204*^9, 
   3.8902254952900558`*^9, 3.890228910215421*^9, 3.8902298785280995`*^9, 
   3.89023114677153*^9, 3.8902342990168405`*^9, 3.8902358679228973`*^9, 
   3.8902382608074417`*^9, 3.8902416466788635`*^9, 3.8902416891063905`*^9, {
   3.890241726128333*^9, 3.8902417652077117`*^9}, 3.890277439947975*^9, 
   3.890278019265848*^9, 3.890278104132979*^9, 3.890279991189436*^9, 
   3.8902800706884985`*^9, 3.890287327972645*^9, 3.8902893198375697`*^9, 
   3.890289717008877*^9, 3.8903844911384945`*^9, 3.8903845303749204`*^9, 
   3.890403722073764*^9, 3.890407600304942*^9, 3.8904115712998066`*^9, 
   3.8904532821645403`*^9, 3.890453430110218*^9, 3.890453497532804*^9, 
   3.8907180697648435`*^9, 3.8907254652222223`*^9, 3.8907338138625355`*^9, 
   3.8907977995585165`*^9, 3.890797835041296*^9, {3.890797888101279*^9, 
   3.8907979168369865`*^9}, 3.890819850757019*^9, 3.8908836245798907`*^9, 
   3.8909082818492465`*^9, 3.890963260095953*^9, 3.8909691274308715`*^9, 
   3.891399650327758*^9, 3.891399702262615*^9, 3.8914003814906344`*^9, 
   3.8914033737089643`*^9, 3.891427995253803*^9, 3.891436979419778*^9, 
   3.891482197084502*^9, 3.8914849229175463`*^9, 3.89156881031524*^9, 
   3.891576911153468*^9, 3.8915825665590615`*^9, 3.8915898072798405`*^9, 
   3.8916536696685247`*^9, 3.8916565056238832`*^9, 3.8916640711923504`*^9, 
   3.8946908744367905`*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"cf539fd2-8fbc-4e7f-8def-81e854bbee12"]
}, Open  ]],

Cell["\<\
We can also now optimise theta using the data formatted for sweep inference.\
\>", "Text",
 CellChangeTimes->{{3.885377004940267*^9, 3.885377063800888*^9}, 
   3.885378136976132*^9, {3.8871100921078577`*^9, 
   3.8871101114426355`*^9}},ExpressionUUID->"f0bcb596-a714-47e2-8edc-\
beb735a16a6a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"thetaOptimisationResults", " ", "=", " ", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"CalcLikeThetaNeutral", "[", 
        RowBox[{
        "configSparseArrays", ",", "probTableFoldedNeutral", ",", "th"}], 
        "]"}], ",", 
       RowBox[{
        RowBox[{"10", "^", 
         RowBox[{"-", "5"}]}], "<", "th", "<", "10"}]}], "}"}], ",", 
     RowBox[{"{", "th", "}"}], ",", 
     RowBox[{"Method", "\[Rule]", "\"\<NelderMead\>\""}], ",", 
     RowBox[{"MaxIterations", "\[Rule]", "1000"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"thetaOptimisationLnCL", " ", "=", " ", 
  RowBox[{"thetaOptimisationResults", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"thetaOptimisationtheta", " ", "=", " ", 
  RowBox[{
   RowBox[{"Values", "[", 
    RowBox[{"thetaOptimisationResults", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQvevHJU2hz28cLRrvgOlN7gsCQLQY3x4wvSZIIiT5
+xvHa7uvhoLoXZcidoLoDV8U9oDoE96bpjcDaYl3e8C0wwl59W4gLZ5kDqbz
LtqWrQfSP37dLgfRPBtEHTcB6fdL9F1A9Julkap7gPSv+p1mIHr9nDv2IPrO
cW4HEL1vK6sriJ5yq98NRPdkiIWDaJtK1UgQvWx6UTKIrki3TgXRWbxv8kB0
3r/wIhB9o/VbOYgO1b5XD6J3MCpn6/984/jExw5Mi/x0KQHRSo86wfSSgMYT
j3+9cWzRvAGmFwo7LVT888bxSJIbmD7BK/wHRDOeFQfTE+IMGKb8A7qrox5M
c715VNTB8tbxWqt9MYgGABa4ydQ=
  "],
 CellLabel->
  "In[193]:=",ExpressionUUID->"098758f5-d9ee-4fa6-9db5-fc04412d08a5"],

Cell[BoxData[
 RowBox[{"-", "32129.974279025304`"}]], "Output",
 CellChangeTimes->{3.894690881091771*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"b607abd6-bbac-481d-a432-0855034a5c81"],

Cell[BoxData["0.5470883579600552`"], "Output",
 CellChangeTimes->{3.8946908811057706`*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"8d93a6e8-4349-43b4-baa4-4129a18b0c30"]
}, Open  ]],

Cell["\<\
Now we want to fit a sweep model and compare it to a neutral one. Fitting the \
sweep model is a bit slower because it has more parameters. To save time we \
perform NelderMead optimisation mutliple times, rather than \
DifferentialEvolution, and take the best result.\
\>", "Text",
 CellChangeTimes->{{3.8871093019985557`*^9, 3.887109320993286*^9}, {
  3.887110123458517*^9, 3.8871101266310377`*^9}, {3.8895229292084074`*^9, 
  3.8895229665449376`*^9}, {3.894691215332673*^9, 3.894691225151016*^9}, {
  3.89469239791838*^9, 
  3.8946924574217095`*^9}},ExpressionUUID->"22c52cd3-dbfb-46ca-a36d-\
046ddb4fcb59"],

Cell["\<\
The functions below are mainly wrappers for the ones above. We can use these \
to fit a neutral model, a local theta model, and a sweep model. For each call \
of NelderMeadMulti2, all three models are fit. The sweep likelihood and \
parameters are printed, and then sweep centre, number of blocks, delta lnCL \
of sweep vs neutral and lnCL of sweep vs local theta are printed.\
\>", "Text",
 CellChangeTimes->{{3.8871093353215466`*^9, 3.8871093429312496`*^9}, {
  3.889671302707094*^9, 3.889671316063637*^9}, {3.8946910211539116`*^9, 
  3.894691196531745*^9}, {3.894692477857947*^9, 
  3.8946925050181417`*^9}},ExpressionUUID->"ef80d2d8-bc58-460e-844f-\
0b09fb83f456"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"CalcLikeThetaLocal", "[", 
    RowBox[{
    "configSparseArrays_", ",", "positions_", ",", "probTable_", ",", 
     "thetaLocal_", ",", "thetaBackground_", ",", "distLocal_", ",", 
     "sweepCenter_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "blockLikelihoodList", ",", "distances", ",", 
       "numProbTableNeutralLocal", ",", "numProbTableNeutralBackground"}], 
      "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"distances", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"positions", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"sweepCenter", "*", "1000000"}], ")"}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"numProbTableNeutralLocal", " ", "=", " ", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "[",
              "thetaLocal", "]"}]}], "&"}], "/@", 
          RowBox[{"ArrayRules", "[", "probTable", "]"}]}], ",", 
         RowBox[{"Dimensions", "[", "probTable", "]"}]}], "]"}]}], ";", "\n", 
      
      RowBox[{"numProbTableNeutralBackground", " ", "=", " ", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "[",
              "thetaBackground", "]"}]}], "&"}], "/@", 
          RowBox[{"ArrayRules", "[", "probTable", "]"}]}], ",", 
         RowBox[{"Dimensions", "[", "probTable", "]"}]}], "]"}]}], ";", "\n", 
      
      RowBox[{"blockLikelihoodList", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#2", ">", "500000"}], ",", " ", "0", ",", " ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#2", ">", "distLocal"}], ",", 
              RowBox[{"CalcNeutralLogLikeWin", "[", 
               RowBox[{"#1", ",", "numProbTableNeutralBackground"}], "]"}], 
              ",", 
              RowBox[{"CalcNeutralLogLikeWin", "[", 
               RowBox[{"#1", ",", "numProbTableNeutralLocal"}], "]"}]}], 
             "]"}]}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"configSparseArrays", ",", "distances"}], "}"}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockLikelihoodList"}], "]"}]}]}], "\n", 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CalcLikeSingleThetaLocal", "[", 
    RowBox[{
    "configSparseArrays_", ",", "positions_", ",", "probTable_", ",", 
     "thetaLocal_", ",", "sweepCenter_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "blockLikelihoodList", ",", "distances", ",", 
       "numProbTableNeutralLocal"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"distances", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"positions", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"sweepCenter", "*", "1000000"}], ")"}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"numProbTableNeutralLocal", " ", "=", " ", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "[",
              "thetaLocal", "]"}]}], "&"}], "/@", 
          RowBox[{"ArrayRules", "[", "probTable", "]"}]}], ",", 
         RowBox[{"Dimensions", "[", "probTable", "]"}]}], "]"}]}], ";", "\n", 
      
      RowBox[{"blockLikelihoodList", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#2", ">", "500000"}], ",", " ", "0", ",", " ", 
            RowBox[{"CalcNeutralLogLikeWin", "[", 
             RowBox[{"#1", ",", "numProbTableNeutralLocal"}], "]"}]}], "]"}], 
          "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"configSparseArrays", ",", "distances"}], "}"}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockLikelihoodList"}], "]"}]}]}], "\n", 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CalcLikeSweepTheta", "[", 
    RowBox[{
    "configSparseArrays_", ",", "positions_", ",", "probTable_", ",", 
     "thetaLocal_", ",", "sweepCenter_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "blockLikelihoodList", ",", "distances", ",", 
       "numProbTableNeutralLocal"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"distances", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"positions", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"sweepCenter", "*", "1000000"}], ")"}]}], "]"}]}], ";", 
      "\n", 
      RowBox[{"numProbTableNeutralLocal", " ", "=", " ", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Rule]", " ", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "[",
              "thetaLocal", "]"}]}], "&"}], "/@", 
          RowBox[{"ArrayRules", "[", "probTable", "]"}]}], ",", 
         RowBox[{"Dimensions", "[", "probTable", "]"}]}], "]"}]}], ";", "\n", 
      
      RowBox[{"blockLikelihoodList", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"400000", "<=", "#2", "<", "500000"}], ",", " ", 
            RowBox[{"CalcNeutralLogLikeWin", "[", 
             RowBox[{"#1", ",", "numProbTableNeutralLocal"}], "]"}], ",", " ",
             "0"}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"configSparseArrays", ",", "distances"}], "}"}]}], "]"}]}], 
      ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockLikelihoodList"}], "]"}]}]}], "\n", 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CountBlocks", "[", 
    RowBox[{"positions_", ",", "sweepCenter_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"blockList", ",", " ", "distances"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"distances", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{"positions", " ", "-", " ", "sweepCenter"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"blockList", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#1", ">", "500000"}], ",", " ", "0", ",", " ", "1"}], 
           "]"}], "&"}], ",", 
         RowBox[{"{", "distances", "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Total", "@", "blockList"}], "]"}]}]}], "\n", "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"NelderMeadMulti2", "[", 
   RowBox[{"sc_", ",", " ", "repeats_", ",", " ", "iters_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bestSweepResult", ",", " ", "bestSweepLikelihood", ",", " ", 
      "bestLTResult", ",", " ", "bestLTLikelihood", ",", " ", "result", ",", 
      " ", "likelihood", ",", " ", "thetaOptimisationResults", ",", " ", 
      "thetaOptimisationLnCL", ",", " ", "thetaOptimisationtheta", ",", " ", 
      "blockCount", ",", " ", "thetaPerifOptimisationResults", ",", " ", 
      "thetaPerifOptimisationtheta", ",", " ", 
      "thetaSweepOptimisationtheta"}], "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"thetaOptimisationResults", " ", "=", " ", 
      RowBox[{"NMaximize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"CalcLikeSingleThetaLocal", "[", 
           RowBox[{
           "configSparseArrays", ",", " ", "midpoints", ",", " ", 
            "numProbTableNeutralFoldedKmax2AllMarginals", ",", " ", 
            "thetaSingle", ",", " ", 
            RowBox[{"(", 
             RowBox[{"sc", " ", "/", " ", "1000000"}], ")"}]}], "]"}], ",", 
          RowBox[{"0.01", "<", "thetaSingle", "<", "1.5"}]}], "}"}], ",", 
        RowBox[{"{", "thetaSingle", "}"}], ",", 
        RowBox[{"Method", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<NelderMead\>\"", ",", " ", 
           RowBox[{"RandomSeed", " ", "->", " ", "44"}], ",", " ", 
           RowBox[{"\"\<PostProcess\>\"", " ", "->", " ", "False"}]}], 
          "}"}]}], ",", 
        RowBox[{"MaxIterations", "\[Rule]", "1000"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"thetaOptimisationLnCL", " ", "=", " ", 
      RowBox[{"thetaOptimisationResults", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thetaOptimisationtheta", " ", "=", " ", 
      RowBox[{
       RowBox[{"Values", "[", 
        RowBox[{"thetaOptimisationResults", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"thetaPerifOptimisationResults", " ", "=", " ", 
        RowBox[{"NMaximize", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"CalcLikeSweepTheta", "[", 
             RowBox[{
             "configSparseArrays", ",", " ", "midpoints", ",", " ", 
              "numProbTableNeutralFoldedKmax2AllMarginals", ",", " ", 
              "thetaSweep", ",", " ", 
              RowBox[{"(", 
               RowBox[{"sc", " ", "/", " ", "1000000"}], ")"}]}], "]"}], ",", 
            
            RowBox[{"0.1", "<", "thetaSweep", "<", "1.5"}]}], "}"}], ",", 
          RowBox[{"{", "thetaSweep", "}"}], ",", 
          RowBox[{"Method", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<NelderMead\>\"", ",", " ", 
             RowBox[{"RandomSeed", " ", "->", " ", "44"}], ",", " ", 
             RowBox[{"\"\<PostProcess\>\"", " ", "->", " ", "False"}]}], 
            "}"}]}], ",", 
          RowBox[{"MaxIterations", "\[Rule]", "1000"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"thetaPerifOptimisationtheta", " ", "=", " ", 
        RowBox[{
         RowBox[{"Values", "[", 
          RowBox[{"thetaPerifOptimisationResults", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
       RowBox[{"thetaSweepOptimisationtheta", " ", "=", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"{", 
          RowBox[{
          "thetaOptimisationtheta", ",", " ", "thetaPerifOptimisationtheta"}],
           " ", "}"}], "]"}]}], ";"}], "*)"}], "\n", 
     RowBox[{"bestSweepLikelihood", " ", "=", " ", 
      RowBox[{"-", "Infinity"}]}], ";", "\n", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", " ", 
       RowBox[{"i", " ", "<=", " ", "repeats"}], ",", " ", 
       RowBox[{"i", "++"}], ",", "\n", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"CalcLogLikeTotal", "[", 
              RowBox[{
              "configSparseArrays", ",", "midpoints", ",", 
               "numProbTableSweepFoldedKmax2AllMarginalsWithThetaGrid", ",", 
               "tha", ",", "aa", ",", "tta", ",", 
               RowBox[{"(", 
                RowBox[{"sc", "/", "1000000"}], ")"}], ",", 
               "numProbTableNeutralFoldedKmax2AllMarginals"}], "]"}], ",", 
             RowBox[{"thetaOptimisationtheta", "<", "tha", "<", "1.5"}], ",", 
             
             RowBox[{
              RowBox[{"-", "5.7"}], "<", "aa", "<", 
              RowBox[{"-", "0.301"}]}], ",", 
             RowBox[{
              RowBox[{"10.", "^", 
               RowBox[{"-", "15"}]}], "<", "tta", "<", "1.0"}]}], "}"}], ",", 
           
           RowBox[{"{", 
            RowBox[{"tha", ",", "aa", ",", "tta"}], "}"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<NelderMead\>\"", ",", " ", 
              RowBox[{"RandomSeed", " ", "->", " ", "i"}], ",", 
              RowBox[{"\"\<PostProcess\>\"", " ", "->", " ", "False"}]}], 
             "}"}]}], ",", 
           RowBox[{"MaxIterations", "\[Rule]", "iters"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"likelihood", " ", "=", " ", 
         RowBox[{"result", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"likelihood", " ", ">", " ", "bestSweepLikelihood"}], ",", 
          " ", 
          RowBox[{
           RowBox[{"bestSweepResult", " ", "=", " ", "result"}], ";", " ", 
           RowBox[{"bestSweepLikelihood", " ", "=", " ", "likelihood"}]}]}], 
         "]"}]}]}], "\n", "]"}], ";", "\n", 
     RowBox[{"Print", "[", "bestSweepResult", "]"}], ";", "\n", 
     RowBox[{"bestLTLikelihood", " ", "=", " ", 
      RowBox[{"-", "Infinity"}]}], ";", "\n", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", " ", 
       RowBox[{"i", " ", "<=", " ", "repeats"}], ",", " ", 
       RowBox[{"i", "++"}], ",", "\n", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"CalcLikeThetaLocal", "[", 
              RowBox[{
              "configSparseArrays", ",", " ", "midpoints", ",", " ", 
               "numProbTableNeutralFoldedKmax2AllMarginals", ",", " ", 
               "thetaLocal", ",", " ", "thetaBackground", ",", " ", 
               "distLocal", ",", " ", 
               RowBox[{"(", 
                RowBox[{"sc", " ", "/", " ", "1000000"}], ")"}]}], "]"}], ",", 
             RowBox[{
             "0.01", "<", "thetaLocal", "<", "thetaOptimisationtheta"}], ",", 
             
             RowBox[{
             "thetaOptimisationtheta", "<", "thetaBackground", "<", "1.5"}], 
             ",", " ", 
             RowBox[{
             "100", " ", "<", " ", "distLocal", " ", "<", " ", "500000"}]}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "thetaLocal", ",", "thetaBackground", ",", " ", "distLocal"}], 
            "}"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<NelderMead\>\"", ",", " ", 
              RowBox[{"RandomSeed", " ", "->", " ", "i"}], ",", " ", 
              RowBox[{"\"\<PostProcess\>\"", " ", "->", " ", "False"}]}], 
             "}"}]}], ",", 
           RowBox[{"MaxIterations", "\[Rule]", "iters"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"likelihood", " ", "=", " ", 
         RowBox[{"result", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"likelihood", " ", ">", " ", "bestLTLikelihood"}], ",", " ", 
          RowBox[{
           RowBox[{"bestLTResult", " ", "=", " ", "result"}], ";", " ", 
           RowBox[{"bestLTLikelihood", " ", "=", " ", "likelihood"}]}]}], 
         "]"}]}]}], "\n", "]"}], ";", "\n", 
     RowBox[{"blockCount", " ", "=", " ", 
      RowBox[{"CountBlocks", "[", 
       RowBox[{"midpoints", ",", " ", "sc"}], "]"}]}], ";", "\n", 
     RowBox[{"Print", "[", 
      RowBox[{"{", 
       RowBox[{"sc", ",", " ", "blockCount", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bestSweepLikelihood", "-", "thetaOptimisationLnCL"}], 
          ")"}], "/", "blockCount"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bestSweepLikelihood", "-", "bestLTLikelihood"}], ")"}], 
         "/", "blockCount"}]}], "}"}], "]"}], ";", "\n", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"sc", ",", " ", "blockCount", ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bestSweepLikelihood", "-", "thetaOptimisationLnCL"}], 
          ")"}], "/", "blockCount"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bestSweepLikelihood", "-", "bestLTLikelihood"}], ")"}], 
         "/", "blockCount"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.8856153192724886`*^9, 3.885615358523858*^9}, {
   3.88561538853431*^9, 3.8856153896054425`*^9}, {3.8856154330369654`*^9, 
   3.885615495408995*^9}, {3.8856155738806562`*^9, 3.8856155747258186`*^9}, {
   3.8856156344827366`*^9, 3.8856156350631757`*^9}, 3.8856156948177643`*^9, {
   3.8856157637128677`*^9, 3.8856157729317074`*^9}, {3.8856159614098997`*^9, 
   3.885615994842312*^9}, {3.8856160341707487`*^9, 3.8856160737629814`*^9}, {
   3.8856161369939804`*^9, 3.885616138282943*^9}, {3.885616185701686*^9, 
   3.885616245996545*^9}, 3.8856163610601797`*^9, {3.8856164012605343`*^9, 
   3.885616407484006*^9}, {3.8856164764562006`*^9, 3.885616486757559*^9}, 
   3.8856165267031136`*^9, 3.885616665796067*^9, {3.8856166959363937`*^9, 
   3.885616718364744*^9}, {3.8856167768736076`*^9, 3.8856167770856996`*^9}, {
   3.885616891108894*^9, 3.885616895381662*^9}, {3.885616985280492*^9, 
   3.885617065144224*^9}, {3.885617098718135*^9, 3.8856170993601017`*^9}, 
   3.885617136008278*^9, {3.8856172210910316`*^9, 3.8856172876549244`*^9}, {
   3.8856173222647443`*^9, 3.885617323652794*^9}, {3.8856174108045964`*^9, 
   3.8856174121978035`*^9}, {3.8856174938292465`*^9, 
   3.8856174954892225`*^9}, {3.8856175620522566`*^9, 3.885617564228101*^9}, {
   3.8856176162475986`*^9, 3.8856176543716373`*^9}, {3.8871082840043707`*^9, 
   3.887108326855971*^9}, {3.887108384257062*^9, 3.887108385014732*^9}, {
   3.887108443804861*^9, 3.8871085622629848`*^9}, {3.8887401963501077`*^9, 
   3.888740254286538*^9}, {3.888740287098172*^9, 3.8887403045969086`*^9}, {
   3.8887404103408203`*^9, 3.888740440234275*^9}, {3.8889841020069447`*^9, 
   3.888984126164117*^9}, 3.8891711770739417`*^9, {3.8895930671723337`*^9, 
   3.8895930951014814`*^9}, {3.8895933761213703`*^9, 
   3.8895933783379517`*^9}, {3.8895935762129326`*^9, 
   3.8895936126949024`*^9}, {3.8895936570717907`*^9, 
   3.8895937233301163`*^9}, {3.889593762659906*^9, 3.8895937925255547`*^9}, {
   3.8895938447638025`*^9, 3.889593948479227*^9}, {3.889593987111678*^9, 
   3.889594145480934*^9}, {3.889594243986189*^9, 3.8895942577349606`*^9}, {
   3.889594297901863*^9, 3.8895943040461855`*^9}, {3.8895948950744*^9, 
   3.889594896245005*^9}, {3.8895993377753158`*^9, 3.8895993381868415`*^9}, {
   3.8895994096254697`*^9, 3.889599508050543*^9}, {3.889599538392932*^9, 
   3.88959965260001*^9}, {3.8895996858605947`*^9, 3.8895997453321056`*^9}, {
   3.889599798090001*^9, 3.889599831506508*^9}, {3.8895998915513506`*^9, 
   3.8895999744597235`*^9}, {3.889600023203417*^9, 3.889600058831152*^9}, {
   3.889600141089635*^9, 3.8896001413445845`*^9}, {3.8896002114500675`*^9, 
   3.889600218720027*^9}, {3.8896003428761272`*^9, 3.889600357141591*^9}, {
   3.8896009789302197`*^9, 3.8896009814265695`*^9}, {3.8896117282308483`*^9, 
   3.8896117376413507`*^9}, {3.8896136690920725`*^9, 
   3.8896136736482816`*^9}, {3.889615188668275*^9, 3.889615215390282*^9}, {
   3.8896152890677924`*^9, 3.889615291655478*^9}, {3.8896154910338516`*^9, 
   3.8896154913548827`*^9}, {3.889631519523493*^9, 3.889631521273658*^9}, {
   3.889631551819771*^9, 3.8896315592336226`*^9}, {3.889631682768823*^9, 
   3.8896317326336594`*^9}, {3.8896318526459417`*^9, 3.889631856109289*^9}, {
   3.889631992046256*^9, 3.8896319984314127`*^9}, {3.8896320381815395`*^9, 
   3.8896320384820046`*^9}, {3.8896321286674333`*^9, 
   3.8896321294106464`*^9}, {3.8896321646305575`*^9, 
   3.8896321744742455`*^9}, {3.8896326134184084`*^9, 3.889632613664169*^9}, {
   3.8896328904189816`*^9, 3.8896328922607822`*^9}, {3.8896330855072813`*^9, 
   3.889633093724918*^9}, {3.8896331597327924`*^9, 3.889633168206026*^9}, {
   3.8896332856609507`*^9, 3.8896333140434017`*^9}, {3.889633369513405*^9, 
   3.889633384773258*^9}, {3.8896334721683216`*^9, 3.889633476105357*^9}, {
   3.8896351011213727`*^9, 3.889635108820155*^9}, {3.8896351420160837`*^9, 
   3.8896351423119755`*^9}, {3.889635631837289*^9, 3.889635632020579*^9}, {
   3.88963610321031*^9, 3.8896361113870926`*^9}, {3.88963625703314*^9, 
   3.88963627035793*^9}, {3.889636670019619*^9, 3.889636676669799*^9}, {
   3.8896369249576373`*^9, 3.8896369258567343`*^9}, {3.889636958858014*^9, 
   3.8896369826194606`*^9}, {3.8897171288073053`*^9, 
   3.8897171299907527`*^9}, {3.889718168082836*^9, 3.8897181691979446`*^9}, {
   3.8897182747623467`*^9, 3.8897182752033567`*^9}, {3.889767549373975*^9, 
   3.8897675517669573`*^9}, {3.8897683709737062`*^9, 3.889768371589819*^9}, {
   3.8897712573493185`*^9, 3.889771297635847*^9}, {3.8897722497131567`*^9, 
   3.889772250707416*^9}, {3.889773359339901*^9, 3.889773360299873*^9}, {
   3.8897733949208155`*^9, 3.8897734211640205`*^9}, {3.88977503600368*^9, 
   3.889775037835288*^9}, {3.8897753228311267`*^9, 3.8897753246204824`*^9}, {
   3.8897764899633164`*^9, 3.8897765289185677`*^9}, {3.8897765634803815`*^9, 
   3.8897765637008214`*^9}, {3.8897824651346655`*^9, 3.889782476443073*^9}, {
   3.890277123748582*^9, 3.8902771347784204`*^9}, {3.89027718130812*^9, 
   3.890277407242677*^9}, {3.8902775869195127`*^9, 3.890277589990327*^9}, {
   3.890277641678775*^9, 3.8902776420887284`*^9}, {3.8902776913329153`*^9, 
   3.890277760551491*^9}, {3.890277906318965*^9, 3.8902779770572505`*^9}, {
   3.8902780907683897`*^9, 3.89027809109243*^9}, {3.8902798914185724`*^9, 
   3.890279945097334*^9}, {3.8902800167279778`*^9, 3.890280041991934*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"e5a3bb16-2d9e-4451-ab36-2071fd1e00ad"],

Cell["\<\
Using a \[OpenCurlyQuote]Do\[CloseCurlyQuote] statement we loop over multiple \
potential sweep centres. [j, 3, 1000] means that we perform NelderMead \
optimisation three times (with different random seeds) each with a max \
iterations of 1000.\
\>", "Text",
 CellChangeTimes->{{3.8946925126042356`*^9, 
  3.8946925990845675`*^9}},ExpressionUUID->"8acf4a82-06d9-422f-aa83-\
edb1e803f8df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"NelderMeadMulti2", "[", 
    RowBox[{"j", ",", " ", "3", ",", " ", "1000"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", " ", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"23927130", ",", "23957130", ",", " ", "5000"}], "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->CompressedData["
1:eJwl03s8FlYYB/CXSMRcRooyyoTIJeWyWJhLuiwqlcpet4reeEOYSjVd3FYq
JfqgrNnoFUVLN9VYM928Mrm0ZrlUZknlOrHn9+yP8/l+zvk85/k85znnGARG
+ITICgSCkzSgSLzRsWmkx/m+v/+X8ElXdADPZ1WyFW1FadBQMMBqtIktWkhr
5ztsS9DirjbS0ymHVXqRpPWcPCVpmgLHZT3cYGBqANt/OVKzncwojGaDP3yX
DkN+GWbF/jO64Jm1vWykVNmwg3wQq83WNUz8rZ/c4OPF5pYW7B0mV/ZeZ+uf
JJrJ/tvjnPh9Ott6OX6FElk+080bGo88uzKZVF8QdhWWisLClclbiuII2PjY
Px0e0xMeheaj7WoqZPeeQ+pw0t3YFEOyxsQjFR4ofHsB/qTkVWLIeYJXzSZD
i8p8YekDPTUTUifTSx3m37w3FQp/bWDbXmgpmJJvRdMU4T5LHYEZGbUziXXN
qVSAS/Nvs5ccJ6tAuUhdNShcceUqfD3edA3O1tITziUfioJYp55KqQU5v0O7
Ht7vNHoOFRbMbIdNKnO6LclsSQJr+t2J19ZkQbVZLyz9+OJ6G9LT32sjLD0p
3A5F64JY1W3Dybakkc60FBi226LBjkxIc2DHs36d4ER6LX3HCqa0Fi8mN2Rn
XoB/hBy3Xo7+fT7O1vml+PmQdtbF7EiTic1q0rdqMyt2qepbiz4X9bECmaLf
haSl/RvWNkL5FazJFrHCE82JUTj3H4sPwOj50VkwcNNe9tjQ3O9jSL+/l7FX
AmIuQf+uFNbs2aGkr0nlJvtk6PJB1WUvqZXix6qdt42HkYYOrFpik3Ee3tv4
7TnQqzvZ6hyZdNrNGhaebXMpJAfrZrjCjnmGHtA834fVjfxxSxHqNE8Ig7E/
LNkBXy7SioE1uhNqoXCJiF33JOsl3DV4mv2iwFNbQl4Td7CuYvMjxaRGnYS1
HI46CxMqYthdplPtS0gf42nsBiONpWXYP72ZvWAquxo2fmLPWg5e1i4nbyiL
dGDaiMurGlLz68+7YYflp/1wqf1s9r6cu+o9rKu/Z41N1CQPyYsNGuy1gDd7
pPgXzZr74Aq7sxENiHsmYfPldGOh0m5HtuWjz3wayTkDR9h3+p2HoFFzzxFY
HiLNhMfrtp6CytdTDz1FHWseJMMFjRUlf6JP64pK4aPq+Ly/cK8vX7CbMuyu
vCdPBUSxD4tqb0Abg4k3oc7k/VYD5FG9zvkw7ZW6wxDZW37GERZ4T+0bJsfy
PumHeUZWa0bJgx0r2bjHx+LG8N68BuPhWO7yFsFoj/NtSdZTmFN4OlSG9Oi8
wx7M/LMKvlG0r4YuDo6BsmT1rV2s5mees+TIsuAXn0KvnmGpPCl7srcBNlmY
L55IdjcEL4NnVLd2wYsOq15B56TAqEmIk3GPge61GbaK5I8qefZQo/1csBL5
/tw/7LyjEROVyfBHNxTh9LLj02B3vaMuTJ9h4D9jFP9X+yv4k8/qg6zfGrZu
07ILemR9kH4JHLPecRXqToll60yz+g1Is1N9bFx7/G/eZPDs4lroK9xWBxWk
qWzf3S3uvqSNSzGrfTRy8npy4bb6j6CvYL0+vLbQYiZ8Ev2sZwNpYFXwD9QY
VNwYhXPcNvSHrxN3LnxPmsjvdoJlQq0ceKBTm209sVlliByY8JxNd2x3hLXu
nf9b4WEySjaE9rC1oVp2MNfUhk2Tzzym+4HyL2/MgOVyMt5GcCSLTYhY9RWs
F8SxawMHxW6khZPxdljvtn2/N5moGsO+lQn/FgakzjoM/ZJzAkRkxsNCNtHs
3xDY7KK0Cd4dcBA7j1E/OmZFQrVSswTYONeC1dgfXANNP0jZrtSbBq6kQ5jq
TJjy1z7XL8lqqZQt3dlyfiXy7VkkgZUD35SHkr/ctboM5ac334G2b9+wOzy3
yW0lK3wOy8OW3tUyGWSY/gNWsHeOAky45MSu0MyZAjUkuWxGwQ9tmWTrnjF2
u/aiETZhI5vReOB8NplbaSyB4c+Lb0HTwyXsS8UF+rlk/pGVbNy7qiXwXPJT
1k7UsvUm+W3zICsXsiYSBlaEs9nXR6sqyUlDUdVQbXPyyZ8Rv29RJhyybQ2q
Rp6IeZvhf/NTXzw=
  "],
 CellLabel->
  "In[201]:=",ExpressionUUID->"043f29f6-8d30-4a93-a43e-f99ae42e213d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "30000.743003430638`"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"tha", "\[Rule]", "0.8459813810129461`"}], ",", 
     RowBox[{"aa", "\[Rule]", 
      RowBox[{"-", "5.647640245344538`"}]}], ",", 
     RowBox[{"tta", "\[Rule]", "0.08356349062843402`"}]}], "}"}]}], 
  "}"}]], "Print",
 CellChangeTimes->{3.891568927771505*^9, 3.891577016560047*^9, 
  3.8915826775358243`*^9, 3.89158988305724*^9, 3.891653805449958*^9, 
  3.8916566243548284`*^9, 3.891665536872943*^9, 3.891668745056432*^9, 
  3.894690981822044*^9},
 CellLabel->
  "During evaluation of \
In[201]:=",ExpressionUUID->"fa32d111-d363-4419-a472-88f65552e2ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "23927130", ",", "13495", ",", "0.11742047618957488`", ",", 
   "0.036421984298998795`"}], "}"}]], "Print",
 CellChangeTimes->{3.891568927771505*^9, 3.891577016560047*^9, 
  3.8915826775358243`*^9, 3.89158988305724*^9, 3.891653805449958*^9, 
  3.8916566243548284`*^9, 3.891665536872943*^9, 3.891668745056432*^9, 
  3.8946910437276545`*^9},
 CellLabel->
  "During evaluation of \
In[201]:=",ExpressionUUID->"eb1cf14f-5ba4-41be-bf11-93c0cbf6a334"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "30162.325446888233`"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"tha", "\[Rule]", "0.8481402446765882`"}], ",", 
     RowBox[{"aa", "\[Rule]", 
      RowBox[{"-", "5.648532795520374`"}]}], ",", 
     RowBox[{"tta", "\[Rule]", "0.08086182506880488`"}]}], "}"}]}], 
  "}"}]], "Print",
 CellChangeTimes->{3.891568927771505*^9, 3.891577016560047*^9, 
  3.8915826775358243`*^9, 3.89158988305724*^9, 3.891653805449958*^9, 
  3.8916566243548284`*^9, 3.891665536872943*^9, 3.891668745056432*^9, 
  3.894691144077957*^9},
 CellLabel->
  "During evaluation of \
In[201]:=",ExpressionUUID->"c9f93a96-aa94-4f0a-83a9-9766c578f609"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "23932130", ",", "13574", ",", "0.11920748564761831`", ",", 
   "0.03551790106688313`"}], "}"}]], "Print",
 CellChangeTimes->{3.891568927771505*^9, 3.891577016560047*^9, 
  3.8915826775358243`*^9, 3.89158988305724*^9, 3.891653805449958*^9, 
  3.8916566243548284`*^9, 3.891665536872943*^9, 3.891668745056432*^9, 
  3.894691203011773*^9},
 CellLabel->
  "During evaluation of \
In[201]:=",ExpressionUUID->"ed7233d2-860d-4e08-9128-9cf4967148f7"]
}, Open  ]],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.894691254330145*^9},
 CellLabel->
  "Out[201]=",ExpressionUUID->"59dc4dac-0cd8-4487-b129-93fa15db3291"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{948, 460},
WindowMargins->{{0.5, Automatic}, {Automatic, 0.5}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.1 Inherited,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 18, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"be6e92b8-dec4-4750-9553-47f6bfa0224c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 201, 5, 31, "Input",ExpressionUUID->"162df380-9bd7-404a-a2c3-ff1eff33472d"],
Cell[762, 27, 485, 11, 89, "Text",ExpressionUUID->"e2317538-b456-496d-8cf8-c99fcd226f37"],
Cell[1250, 40, 7780, 110, 95, "Input",ExpressionUUID->"b9c8d29b-91c2-4a96-881d-7fc97feb86a1"],
Cell[9033, 152, 240, 6, 38, "Text",ExpressionUUID->"52ff7ead-9efc-4358-b16d-2ea3b1613814"],
Cell[9276, 160, 3226, 77, 280, "Input",ExpressionUUID->"33eecb9b-661f-4b22-ae92-b44dac2f953d",
 InitializationCell->True],
Cell[12505, 239, 485, 12, 32, "Input",ExpressionUUID->"085df4ae-3e9e-4c21-a22c-6e782b864930"],
Cell[CellGroupData[{
Cell[13015, 255, 258, 4, 74, "Section",ExpressionUUID->"e53c2e25-59b3-4f2d-bc27-38723ea4ae4e"],
Cell[13276, 261, 586, 10, 63, "Text",ExpressionUUID->"a6c8d656-da11-4645-a8f2-10b6f166f253"],
Cell[13865, 273, 1215, 27, 73, "Input",ExpressionUUID->"f2139d38-0349-4ec1-b344-2c926af4ec9b"],
Cell[15083, 302, 179, 3, 38, "Text",ExpressionUUID->"15c2e0a4-36b8-45fd-af5e-27573aa90cc7"],
Cell[CellGroupData[{
Cell[15287, 309, 728, 15, 32, "Input",ExpressionUUID->"987ad324-5ed7-4a5a-889a-75d9132e2524"],
Cell[16018, 326, 6903, 99, 35, "Output",ExpressionUUID->"757a6cc1-e806-49f5-bd92-511fb49fe966"]
}, Open  ]],
Cell[22936, 428, 1177, 20, 139, "Text",ExpressionUUID->"52a27369-cb6a-41d3-9407-86b0605005ea"],
Cell[24116, 450, 1523, 28, 52, "Input",ExpressionUUID->"4ce3f564-ceb3-4281-8522-de6608b1b0c1"],
Cell[25642, 480, 278, 6, 38, "Text",ExpressionUUID->"c41a2832-abdb-4f42-b519-846aacd09aa6"],
Cell[25923, 488, 695, 15, 31, "Input",ExpressionUUID->"0403394d-1257-4a9e-afd9-d360e431a099"],
Cell[26621, 505, 545, 10, 63, "Text",ExpressionUUID->"7bbd770f-ce91-4c33-93a7-31784d3c9020"],
Cell[CellGroupData[{
Cell[27191, 519, 912, 17, 52, "Input",ExpressionUUID->"e227f690-7fb8-4930-9d07-04f1596955bd"],
Cell[28106, 538, 11786, 300, 333, "Output",ExpressionUUID->"49f7ef30-18ac-4cab-abd0-fbd779e8020b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39941, 844, 165, 3, 74, "Section",ExpressionUUID->"61b87fa0-691b-4f81-9513-7f4711491cf5"],
Cell[40109, 849, 754, 12, 89, "Text",ExpressionUUID->"8c47e7e3-3f5b-4b40-83e2-9e6f9f25a9e4"],
Cell[40866, 863, 253, 6, 38, "Text",ExpressionUUID->"4c42c7c4-ab3e-4ee5-955a-a1600c5f3f82"],
Cell[41122, 871, 2656, 54, 157, "Input",ExpressionUUID->"728de99d-f4b7-45ae-94c0-81a119f1f7a1"],
Cell[43781, 927, 270, 6, 38, "Text",ExpressionUUID->"5f804567-5dcb-41b6-9dc6-0b4300d469b7"],
Cell[44054, 935, 996, 19, 31, "Input",ExpressionUUID->"a0af5989-a3d0-46d9-a785-fde1b1ba2f53"],
Cell[45053, 956, 412, 8, 63, "Text",ExpressionUUID->"026061e2-beae-47f3-b142-3bae786132ca"],
Cell[45468, 966, 749, 16, 52, "Input",ExpressionUUID->"345f9982-29bd-4bb3-88bc-19557e9944de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46254, 987, 158, 3, 74, "Section",ExpressionUUID->"a639e589-f031-44d2-ae5a-b331f187e6b3"],
Cell[46415, 992, 526, 9, 63, "Text",ExpressionUUID->"7b389fca-ddc9-4390-b7bc-30fb8f09fdb3"],
Cell[46944, 1003, 836, 14, 89, "Text",ExpressionUUID->"7c9dcfcf-7c24-4ea1-b471-d9ce2ba33b47"],
Cell[47783, 1019, 6036, 133, 490, "Input",ExpressionUUID->"61be4f1b-8f54-47b6-8df0-4278f22f7231",
 InitializationCell->True],
Cell[53822, 1154, 1407, 31, 73, "Input",ExpressionUUID->"e1bb4a23-77c4-4103-a8e3-39f886f495d1"],
Cell[55232, 1187, 1825, 35, 136, "Input",ExpressionUUID->"9eba90d2-cb4d-4007-9122-4ce51dad4398"],
Cell[57060, 1224, 652, 14, 52, "Input",ExpressionUUID->"fd75244f-c2e5-4a7e-a4a4-efd26998037a"],
Cell[57715, 1240, 483, 9, 63, "Text",ExpressionUUID->"807b22cc-3b0e-4788-a7b0-f7ed266ab35d"],
Cell[58201, 1251, 831, 14, 32, "Input",ExpressionUUID->"2aee3893-f5d1-4ed6-9422-a6f77abcd37c"],
Cell[59035, 1267, 473, 8, 63, "Text",ExpressionUUID->"3381a04c-d5f1-4252-b846-955693dd161f"],
Cell[59511, 1277, 4072, 95, 403, "Code",ExpressionUUID->"ad2ca442-995f-4e0c-9074-556370361eb8"],
Cell[63586, 1374, 2431, 51, 157, "Input",ExpressionUUID->"9de69286-a89e-44d7-8b22-fe3060493b25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66054, 1430, 241, 4, 74, "Section",ExpressionUUID->"26af2b23-9b35-4f3a-a4b8-477af8cc929f"],
Cell[66298, 1436, 326, 7, 38, "Text",ExpressionUUID->"86aa3d04-f667-44d8-ab87-04557634b0a7"],
Cell[CellGroupData[{
Cell[66649, 1447, 7654, 111, 94, "Input",ExpressionUUID->"703b2cdd-db91-401e-9a97-5562313925a4"],
Cell[74306, 1560, 9097, 127, 35, "Output",ExpressionUUID->"3e6a95ee-04ef-4ef8-82c4-29f6743a6ad0"],
Cell[83406, 1689, 9147, 128, 35, "Output",ExpressionUUID->"9a02a8db-2572-43a3-ad9a-e45b5734769a"],
Cell[92556, 1819, 9147, 128, 35, "Output",ExpressionUUID->"5fe9ee51-1241-4b97-962e-f7160765c7bc"]
}, Open  ]],
Cell[101718, 1950, 368, 8, 63, "Text",ExpressionUUID->"fa3c3aea-0136-4d39-87b9-d498d27f9593"],
Cell[102089, 1960, 492, 12, 31, "Input",ExpressionUUID->"c6971dbb-71f1-4a05-aa41-0015589c1030"],
Cell[102584, 1974, 648, 11, 89, "Text",ExpressionUUID->"9418f7aa-cd78-4aa8-8f39-62ea6b51e9c4"],
Cell[CellGroupData[{
Cell[103257, 1989, 4014, 98, 220, "Input",ExpressionUUID->"f096f50e-bbcf-4249-8fdb-a8f20469cfe2"],
Cell[107274, 2089, 11273, 309, 333, "Output",ExpressionUUID->"8eb2167d-8a87-4983-af8e-9b4079626d63"]
}, Open  ]],
Cell[118562, 2401, 567, 10, 89, "Text",ExpressionUUID->"638584cb-c9c3-4840-b32b-47b2c03264da"],
Cell[119132, 2413, 558, 15, 31, "Input",ExpressionUUID->"50fe862b-d625-43ca-bb69-d6d7d578d0ea"],
Cell[119693, 2430, 984, 15, 89, "Text",ExpressionUUID->"87f62d7b-5dbe-491d-9e29-7827eb44517e"],
Cell[120680, 2447, 1227, 19, 165, "Text",ExpressionUUID->"cc6d6d13-a616-47a3-8239-d7612d317439"],
Cell[121910, 2468, 11777, 253, 952, "Input",ExpressionUUID->"63413807-edeb-4a4b-99f1-1e5694b97475",
 InitializationCell->True],
Cell[133690, 2723, 583, 10, 38, "Text",ExpressionUUID->"0bda5d5f-c5f6-4303-a7da-a3e23bdaad14"],
Cell[CellGroupData[{
Cell[134298, 2737, 349, 7, 31, "Input",ExpressionUUID->"6f068161-8949-4946-97f5-fdfcea9018db"],
Cell[134650, 2746, 5682, 79, 35, "Output",ExpressionUUID->"cf539fd2-8fbc-4e7f-8def-81e854bbee12"]
}, Open  ]],
Cell[140347, 2828, 303, 6, 38, "Text",ExpressionUUID->"f0bcb596-a714-47e2-8edc-beb735a16a6a"],
Cell[CellGroupData[{
Cell[140675, 2838, 1533, 37, 115, "Input",ExpressionUUID->"098758f5-d9ee-4fa6-9db5-fc04412d08a5"],
Cell[142211, 2877, 188, 4, 35, "Output",ExpressionUUID->"b607abd6-bbac-481d-a432-0855034a5c81"],
Cell[142402, 2883, 173, 3, 35, "Output",ExpressionUUID->"8d93a6e8-4349-43b4-baa4-4129a18b0c30"]
}, Open  ]],
Cell[142590, 2889, 620, 11, 89, "Text",ExpressionUUID->"22c52cd3-dbfb-46ca-a36d-046ddb4fcb59"],
Cell[143213, 2902, 678, 11, 114, "Text",ExpressionUUID->"ef80d2d8-bc58-460e-844f-0b09fb83f456"],
Cell[143894, 2915, 22381, 490, 1137, "Code",ExpressionUUID->"e5a3bb16-2d9e-4451-ab36-2071fd1e00ad"],
Cell[166278, 3407, 399, 8, 63, "Text",ExpressionUUID->"8acf4a82-06d9-422f-aa83-edb1e803f8df"],
Cell[CellGroupData[{
Cell[166702, 3419, 2601, 49, 31, "Input",ExpressionUUID->"043f29f6-8d30-4a93-a43e-f99ae42e213d"],
Cell[CellGroupData[{
Cell[169328, 3472, 684, 17, 24, "Print",ExpressionUUID->"fa32d111-d363-4419-a472-88f65552e2ee"],
Cell[170015, 3491, 487, 11, 24, "Print",ExpressionUUID->"eb1cf14f-5ba4-41be-bf11-93c0cbf6a334"],
Cell[170505, 3504, 684, 17, 24, "Print",ExpressionUUID->"c9f93a96-aa94-4f0a-83a9-9766c578f609"],
Cell[171192, 3523, 484, 11, 24, "Print",ExpressionUUID->"ed7233d2-860d-4e08-9128-9cf4967148f7"]
}, Open  ]],
Cell[171691, 3537, 160, 3, 35, "Output",ExpressionUUID->"59dc4dac-0cd8-4487-b129-93fa15db3291"]
}, Open  ]]
}, Open  ]]
}
]
*)

